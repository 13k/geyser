// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IBroadcastService.

package geyser

import "net/http"

// SchemaBroadcastService stores the SchemaInterfaces for interface IBroadcastService.
var SchemaBroadcastService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "PostGameDataFrameRTMP",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "AppID of the game being broadcasted",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Broadcasters SteamID",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Valid RTMP token for the Broadcaster",
						Name:        "rtmp_token",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "game data frame expressing current state of game (string, zipped, whatever)",
						Name:        "frame_data",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "IBroadcastService",
	},
)

// BroadcastService represents interface IBroadcastService.
type BroadcastService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewBroadcastService creates a new BroadcastService interface.
func NewBroadcastService(c *Client) (*BroadcastService, error) {
	si, err := SchemaBroadcastService.Get("IBroadcastService", 0)

	if err != nil {
		return nil, err
	}

	s := &BroadcastService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// BroadcastService creates a new BroadcastService interface.
func (c *Client) BroadcastService() (*BroadcastService, error) {
	return NewBroadcastService(c)
}

// PostGameDataFrameRTMP creates a Request for interface method PostGameDataFrameRTMP.
func (i *BroadcastService) PostGameDataFrameRTMP() (*Request, error) {
	sm, err := i.Interface.Methods.Get("PostGameDataFrameRTMP", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &BroadcastServicePostGameDataFrameRTMP{},
	}

	return req, nil
}
