// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewBroadcastService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestBroadcastService_GetBroadcastUploadStats(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceGetBroadcastUploadStats
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastUploadStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastUploadStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceGetBroadcastUploadStats)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_GetBroadcastViewerStats(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceGetBroadcastViewerStats
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastViewerStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastViewerStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceGetBroadcastViewerStats)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_GetBuildClipStatus(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceGetBuildClipStatus
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBuildClipStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBuildClipStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceGetBuildClipStatus)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_GetClipDetails(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceGetClipDetails
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetClipDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetClipDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceGetClipDetails)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_GetRTMPInfo(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceGetRTMPInfo
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRTMPInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRTMPInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceGetRTMPInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_MuteBroadcastChatUser(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceMuteBroadcastChatUser
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.MuteBroadcastChatUser()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "MuteBroadcastChatUser", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceMuteBroadcastChatUser)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_PostChatMessage(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServicePostChatMessage
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.PostChatMessage()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "PostChatMessage", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServicePostChatMessage)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_PostGameDataFrameRTMP(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServicePostGameDataFrameRTMP
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.PostGameDataFrameRTMP()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "PostGameDataFrameRTMP", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServicePostGameDataFrameRTMP)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_RemoveUserChatText(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceRemoveUserChatText
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RemoveUserChatText()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveUserChatText", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceRemoveUserChatText)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_SetRTMPInfo(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceSetRTMPInfo
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetRTMPInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetRTMPInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceSetRTMPInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_StartBuildClip(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceStartBuildClip
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.StartBuildClip()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "StartBuildClip", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceStartBuildClip)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestBroadcastService_UpdateChatMessageFlair(t *testing.T) {
	var i *geyser.BroadcastService
	var err error
	var req *geyser.Request
	var result *geyser.BroadcastServiceUpdateChatMessageFlair
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.UpdateChatMessageFlair()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UpdateChatMessageFlair", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.BroadcastServiceUpdateChatMessageFlair)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
