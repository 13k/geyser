// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ICheatReportingService

package geyser

import "net/http"

// SchemaCheatReportingService stores the SchemaInterfaces for interface ICheatReportingService
var SchemaCheatReportingService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "ReportCheatData",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "steamid of the user running and reporting the cheat.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The appid.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "path and file name of the cheat executable.",
						Name:        "pathandfilename",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "web url where the cheat was found and downloaded.",
						Name:        "webcheaturl",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "local system time now.",
						Name:        "time_now",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "local system time when cheat process started. ( 0 if not yet run )",
						Name:        "time_started",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "local system time when cheat process stopped. ( 0 if still running )",
						Name:        "time_stopped",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "descriptive name for the cheat.",
						Name:        "cheatname",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "process ID of the running game.",
						Name:        "game_process_id",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "process ID of the cheat process that ran",
						Name:        "cheat_process_id",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "cheat param 1",
						Name:        "cheat_param_1",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "cheat param 2",
						Name:        "cheat_param_2",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "data collection in json format",
						Name:        "cheat_data_dump",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "ICheatReportingService",
	},
)

// CheatReportingService represents interface ICheatReportingService
type CheatReportingService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewCheatReportingService creates a new CheatReportingService interface
func NewCheatReportingService(c *Client) (*CheatReportingService, error) {
	si, err := SchemaCheatReportingService.Get("ICheatReportingService", 0)

	if err != nil {
		return nil, err
	}

	s := &CheatReportingService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// CheatReportingService creates a new CheatReportingService interface
func (c *Client) CheatReportingService() (*CheatReportingService, error) {
	return NewCheatReportingService(c)
}

// ReportCheatData creates a Request for interface method ReportCheatData
func (i *CheatReportingService) ReportCheatData() (*Request, error) {
	sm, err := i.Interface.Methods.Get("ReportCheatData", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CheatReportingServiceReportCheatData{},
	}

	return req, nil
}
