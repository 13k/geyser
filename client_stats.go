// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IClientStats.

package geyser

import "net/http"

// SchemaClientStats stores the SchemaInterfaces for interface IClientStats.
var SchemaClientStats = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod:   http.MethodPost,
				Name:         "ReportEvent",
				Params:       NewSchemaMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IClientStats_1046930",
		Undocumented: false,
	},
)

// ClientStats represents interface IClientStats.
//
// Supported AppIDs: 1046930.
type ClientStats struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewClientStats creates a new ClientStats interface.
//
// Supported AppIDs: 1046930.
func NewClientStats(c *Client, appID uint32) (*ClientStats, error) {
	si, err := SchemaClientStats.Get(SchemaInterfaceKey{
		AppID: appID,
		Name:  "IClientStats",
	})

	if err != nil {
		return nil, err
	}

	s := &ClientStats{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ClientStats creates a new ClientStats interface.
//
// Supported AppIDs: 1046930.
func (c *Client) ClientStats(appID uint32) (*ClientStats, error) {
	return NewClientStats(c, appID)
}

// ReportEvent creates a Request for interface method ReportEvent.
func (i *ClientStats) ReportEvent() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "ReportEvent",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &ClientStatsReportEvent{},
	}

	return req, nil
}
