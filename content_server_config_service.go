// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IContentServerConfigService.

package geyser

import "net/http"

// SchemaContentServerConfigService stores the SchemaInterfaces for interface IContentServerConfigService.
var SchemaContentServerConfigService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SetSteamCacheClientFilters",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Unique ID number",
						Name:        "cache_id",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid current cache API key",
						Name:        "cache_key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Notes",
						Name:        "change_notes",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "comma-separated list of allowed IP address blocks in CIDR format - blank to clear unfilter",
						Name:        "allowed_ip_blocks",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSteamCacheNodeParams",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Unique ID number",
						Name:        "cache_id",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid current cache API key",
						Name:        "cache_key",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SetSteamCachePerformanceStats",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Unique ID number",
						Name:        "cache_id",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid current cache API key",
						Name:        "cache_key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Outgoing network traffic in Mbps",
						Name:        "mbps_sent",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Incoming network traffic in Mbps",
						Name:        "mbps_recv",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Percent CPU load",
						Name:        "cpu_percent",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Percent cache hits",
						Name:        "cache_hit_percent",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Number of unique connected IP addresses",
						Name:        "num_connected_ips",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "What is the percent utilization of the busiest datacenter egress link?",
						Name:        "upstream_egress_utilization",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IContentServerConfigService",
		Undocumented: false,
	},
)

// ContentServerConfigService represents interface IContentServerConfigService.
type ContentServerConfigService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewContentServerConfigService creates a new ContentServerConfigService interface.
func NewContentServerConfigService(c *Client) (*ContentServerConfigService, error) {
	si, err := SchemaContentServerConfigService.Get(SchemaInterfaceKey{Name: "IContentServerConfigService"})

	if err != nil {
		return nil, err
	}

	s := &ContentServerConfigService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ContentServerConfigService creates a new ContentServerConfigService interface.
func (c *Client) ContentServerConfigService() (*ContentServerConfigService, error) {
	return NewContentServerConfigService(c)
}

/*
GetSteamCacheNodeParams creates a Request for interface method GetSteamCacheNodeParams.

Parameters

  * key [string] (required): Access key
  * cache_id [uint32] (required): Unique ID number
  * cache_key [string] (required): Valid current cache API key
*/
func (i *ContentServerConfigService) GetSteamCacheNodeParams() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetSteamCacheNodeParams",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &ContentServerConfigServiceGetSteamCacheNodeParams{},
	}

	return req, nil
}

/*
SetSteamCacheClientFilters creates a Request for interface method SetSteamCacheClientFilters.

Parameters

  * key [string] (required): Access key
  * cache_id [uint32] (required): Unique ID number
  * cache_key [string] (required): Valid current cache API key
  * change_notes [string] (required): Notes
  * allowed_ip_blocks [string] (required): comma-separated list of allowed IP address blocks in CIDR format - blank to clear unfilter
*/
func (i *ContentServerConfigService) SetSteamCacheClientFilters() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "SetSteamCacheClientFilters",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &ContentServerConfigServiceSetSteamCacheClientFilters{},
	}

	return req, nil
}

/*
SetSteamCachePerformanceStats creates a Request for interface method SetSteamCachePerformanceStats.

Parameters

  * key [string] (required): Access key
  * cache_id [uint32] (required): Unique ID number
  * cache_key [string] (required): Valid current cache API key
  * mbps_sent [uint32] (required): Outgoing network traffic in Mbps
  * mbps_recv [uint32] (required): Incoming network traffic in Mbps
  * cpu_percent [uint32] (required): Percent CPU load
  * cache_hit_percent [uint32] (required): Percent cache hits
  * num_connected_ips [uint32] (required): Number of unique connected IP addresses
  * upstream_egress_utilization [uint32] (required): What is the percent utilization of the busiest datacenter egress link?
*/
func (i *ContentServerConfigService) SetSteamCachePerformanceStats() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "SetSteamCachePerformanceStats",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &ContentServerConfigServiceSetSteamCachePerformanceStats{},
	}

	return req, nil
}
