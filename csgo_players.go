// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ICSGOPlayers.

package geyser

import "net/http"

// SchemaCSGOPlayers stores the SchemaInterfaces for interface ICSGOPlayers.
var SchemaCSGOPlayers = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetNextMatchSharingCode",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The SteamID of the user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Previously known match sharing code obtained from the SteamID",
						Name:        "knowncode",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ICSGOPlayers_730",
		Undocumented: false,
	},
)

// CSGOPlayers represents interface ICSGOPlayers.
//
// Supported AppIDs: 730.
type CSGOPlayers struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewCSGOPlayers creates a new CSGOPlayers interface.
//
// Supported AppIDs: 730.
func NewCSGOPlayers(c *Client, appID uint32) (*CSGOPlayers, error) {
	si, err := SchemaCSGOPlayers.Get(SchemaInterfaceKey{
		AppID: appID,
		Name:  "ICSGOPlayers",
	})

	if err != nil {
		return nil, err
	}

	s := &CSGOPlayers{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// CSGOPlayers creates a new CSGOPlayers interface.
//
// Supported AppIDs: 730.
func (c *Client) CSGOPlayers(appID uint32) (*CSGOPlayers, error) {
	return NewCSGOPlayers(c, appID)
}

/*
GetNextMatchSharingCode creates a Request for interface method GetNextMatchSharingCode.

Parameters

  * steamid [uint64] (required): The SteamID of the user
  * steamidkey [string] (required): Authentication obtained from the SteamID
  * knowncode [string] (required): Previously known match sharing code obtained from the SteamID
*/
func (i *CSGOPlayers) GetNextMatchSharingCode() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetNextMatchSharingCode",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOPlayersGetNextMatchSharingCode{},
	}

	return req, nil
}
