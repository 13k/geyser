// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ICSGOServers.

package geyser

import "net/http"

// SchemaCSGOServers stores the SchemaInterfaces for interface ICSGOServers.
var SchemaCSGOServers = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGameMapsPlaytime",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "What recent interval is requested, possible values: day, week, month",
						Name:        "interval",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "What game mode is requested, possible values: competitive, casual",
						Name:        "gamemode",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "What maps are requested, possible values: operation",
						Name:        "mapgroup",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGameServersStatus",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "ICSGOServers_730",
	},
)

// CSGOServers represents interface ICSGOServers.
//
// Supported AppIDs: [730].
type CSGOServers struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewCSGOServers creates a new CSGOServers interface.
//
// Supported AppIDs: [730].
func NewCSGOServers(c *Client, appID uint32) (*CSGOServers, error) {
	si, err := SchemaCSGOServers.Get("ICSGOServers", appID)

	if err != nil {
		return nil, err
	}

	s := &CSGOServers{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// CSGOServers creates a new CSGOServers interface.
//
// Supported AppIDs: [730].
func (c *Client) CSGOServers(appID uint32) (*CSGOServers, error) {
	return NewCSGOServers(c, appID)
}

// GetGameServersStatus creates a Request for interface method GetGameServersStatus.
func (i *CSGOServers) GetGameServersStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetGameServersStatus", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOServersGetGameServersStatus{},
	}

	return req, nil
}

// GetGameMapsPlaytime creates a Request for interface method GetGameMapsPlaytime.
func (i *CSGOServers) GetGameMapsPlaytime() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetGameMapsPlaytime", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOServersGetGameMapsPlaytime{},
	}

	return req, nil
}
