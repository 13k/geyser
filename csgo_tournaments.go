// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ICSGOTournaments.

package geyser

import "net/http"

// SchemaCSGOTournaments stores the SchemaInterfaces for interface ICSGOTournaments.
var SchemaCSGOTournaments = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentFantasyLineup",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the user inventory",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the user inventory",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentLayout",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPredictions",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the user inventory",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "UploadTournamentFantasyLineup",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the user inventory",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Event section id",
						Name:        "sectionid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "PickID to select for the slot",
						Name:        "pickid0",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid0",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "PickID to select for the slot",
						Name:        "pickid1",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid1",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "PickID to select for the slot",
						Name:        "pickid2",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid2",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "PickID to select for the slot",
						Name:        "pickid3",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid3",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "PickID to select for the slot",
						Name:        "pickid4",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid4",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "UploadTournamentPredictions",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The event ID",
						Name:        "event",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the user inventory",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Authentication obtained from the SteamID",
						Name:        "steamidkey",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Event section id",
						Name:        "sectionid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Event group id",
						Name:        "groupid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Index in group",
						Name:        "index",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Pick ID to select",
						Name:        "pickid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "ItemID to lock in for the pick",
						Name:        "itemid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
		),
		Name: "ICSGOTournaments_730",
	},
)

// CSGOTournaments represents interface ICSGOTournaments.
//
// Supported AppIDs: [730].
type CSGOTournaments struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewCSGOTournaments creates a new CSGOTournaments interface.
//
// Supported AppIDs: [730].
func NewCSGOTournaments(c *Client, appID uint32) (*CSGOTournaments, error) {
	si, err := SchemaCSGOTournaments.Get("ICSGOTournaments", appID)

	if err != nil {
		return nil, err
	}

	s := &CSGOTournaments{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// CSGOTournaments creates a new CSGOTournaments interface.
//
// Supported AppIDs: [730].
func (c *Client) CSGOTournaments(appID uint32) (*CSGOTournaments, error) {
	return NewCSGOTournaments(c, appID)
}

// UploadTournamentPredictions creates a Request for interface method UploadTournamentPredictions.
func (i *CSGOTournaments) UploadTournamentPredictions() (*Request, error) {
	sm, err := i.Interface.Methods.Get("UploadTournamentPredictions", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsUploadTournamentPredictions{},
	}

	return req, nil
}

// GetTournamentFantasyLineup creates a Request for interface method GetTournamentFantasyLineup.
func (i *CSGOTournaments) GetTournamentFantasyLineup() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentFantasyLineup", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsGetTournamentFantasyLineup{},
	}

	return req, nil
}

// GetTournamentItems creates a Request for interface method GetTournamentItems.
func (i *CSGOTournaments) GetTournamentItems() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentItems", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsGetTournamentItems{},
	}

	return req, nil
}

// GetTournamentLayout creates a Request for interface method GetTournamentLayout.
func (i *CSGOTournaments) GetTournamentLayout() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentLayout", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsGetTournamentLayout{},
	}

	return req, nil
}

// GetTournamentPredictions creates a Request for interface method GetTournamentPredictions.
func (i *CSGOTournaments) GetTournamentPredictions() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentPredictions", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsGetTournamentPredictions{},
	}

	return req, nil
}

// UploadTournamentFantasyLineup creates a Request for interface method UploadTournamentFantasyLineup.
func (i *CSGOTournaments) UploadTournamentFantasyLineup() (*Request, error) {
	sm, err := i.Interface.Methods.Get("UploadTournamentFantasyLineup", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &CSGOTournamentsUploadTournamentFantasyLineup{},
	}

	return req, nil
}
