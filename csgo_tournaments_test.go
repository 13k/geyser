// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewCSGOTournaments(t *testing.T) {
	client := &geyser.Client{}
	appIDs := []uint32{730}

	for _, appID := range appIDs {
		i, err := geyser.NewCSGOTournaments(client, appID)

		require.NoError(t, err)
		require.NotNil(t, i)

		assert.Same(t, client, i.Client)
		assert.NotNil(t, i.Interface)
	}
}

func TestCSGOTournaments_GetTournamentFantasyLineup(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsGetTournamentFantasyLineup
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentFantasyLineup()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentFantasyLineup", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsGetTournamentFantasyLineup)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestCSGOTournaments_GetTournamentItems(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsGetTournamentItems
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentItems()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentItems", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsGetTournamentItems)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestCSGOTournaments_GetTournamentLayout(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsGetTournamentLayout
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentLayout()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentLayout", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsGetTournamentLayout)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestCSGOTournaments_GetTournamentPredictions(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsGetTournamentPredictions
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentPredictions()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentPredictions", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsGetTournamentPredictions)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestCSGOTournaments_UploadTournamentFantasyLineup(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsUploadTournamentFantasyLineup
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.UploadTournamentFantasyLineup()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UploadTournamentFantasyLineup", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsUploadTournamentFantasyLineup)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestCSGOTournaments_UploadTournamentPredictions(t *testing.T) {
	var i *geyser.CSGOTournaments
	var err error
	var req *geyser.Request
	var result *geyser.CSGOTournamentsUploadTournamentPredictions
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewCSGOTournaments(client, 730)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.UploadTournamentPredictions()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UploadTournamentPredictions", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.CSGOTournamentsUploadTournamentPredictions)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
