// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2DPC.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaDOTA2DPC stores the SchemaInterfaces for interface IDOTA2DPC.
var SchemaDOTA2DPC = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetLeagueInfoList",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetLeagueMatchMinimal",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetLeagueNodeData",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetPlayerInfo",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetRealtimeMatchStats",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetRecentAndUpcomingMatches",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetSingleTeamInfo",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IDOTA2DPC",
		Undocumented: true,
	},
)

// DOTA2DPC represents interface IDOTA2DPC.
//
// This is an undocumented interface.
type DOTA2DPC struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewDOTA2DPC creates a new DOTA2DPC interface.
func NewDOTA2DPC(c *Client) (*DOTA2DPC, error) {
	si, err := SchemaDOTA2DPC.Get(geyser.SchemaInterfaceKey{Name: "IDOTA2DPC"})

	if err != nil {
		return nil, err
	}

	s := &DOTA2DPC{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2DPC creates a new DOTA2DPC interface.
func (c *Client) DOTA2DPC() (*DOTA2DPC, error) {
	return NewDOTA2DPC(c)
}

/*
GetLeagueInfoList creates a Request for interface method GetLeagueInfoList.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetLeagueInfoList() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetLeagueInfoList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetLeagueInfoList{},
	}

	return req, nil
}

/*
GetLeagueMatchMinimal creates a Request for interface method GetLeagueMatchMinimal.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetLeagueMatchMinimal() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetLeagueMatchMinimal",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetLeagueMatchMinimal{},
	}

	return req, nil
}

/*
GetLeagueNodeData creates a Request for interface method GetLeagueNodeData.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetLeagueNodeData() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetLeagueNodeData",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetLeagueNodeData{},
	}

	return req, nil
}

/*
GetPlayerInfo creates a Request for interface method GetPlayerInfo.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetPlayerInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetPlayerInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetPlayerInfo{},
	}

	return req, nil
}

/*
GetRealtimeMatchStats creates a Request for interface method GetRealtimeMatchStats.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetRealtimeMatchStats() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetRealtimeMatchStats",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetRealtimeMatchStats{},
	}

	return req, nil
}

/*
GetRecentAndUpcomingMatches creates a Request for interface method GetRecentAndUpcomingMatches.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetRecentAndUpcomingMatches() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetRecentAndUpcomingMatches",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetRecentAndUpcomingMatches{},
	}

	return req, nil
}

/*
GetSingleTeamInfo creates a Request for interface method GetSingleTeamInfo.

This is an undocumented method.
*/
func (i *DOTA2DPC) GetSingleTeamInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetSingleTeamInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2DPCGetSingleTeamInfo{},
	}

	return req, nil
}
