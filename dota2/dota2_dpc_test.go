// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewDOTA2DPC(t *testing.T) {
	client := &dota2.Client{}
	i, err := dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestDOTA2DPC_GetLeagueInfoList(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetLeagueInfoList
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueInfoList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueInfoList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetLeagueInfoList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetLeagueMatchMinimal(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetLeagueMatchMinimal
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueMatchMinimal()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueMatchMinimal", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetLeagueMatchMinimal)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetLeagueNodeData(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetLeagueNodeData
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueNodeData()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueNodeData", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetLeagueNodeData)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetPlayerInfo(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetPlayerInfo
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPlayerInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPlayerInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetPlayerInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetRealtimeMatchStats(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetRealtimeMatchStats
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRealtimeMatchStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRealtimeMatchStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetRealtimeMatchStats)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetRecentAndUpcomingMatches(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetRecentAndUpcomingMatches
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRecentAndUpcomingMatches()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRecentAndUpcomingMatches", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetRecentAndUpcomingMatches)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2DPC_GetSingleTeamInfo(t *testing.T) {
	var i *dota2.DOTA2DPC
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2DPCGetSingleTeamInfo
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSingleTeamInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSingleTeamInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2DPCGetSingleTeamInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
