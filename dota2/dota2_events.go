// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2Events.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaDOTA2Events stores the SchemaInterfaces for interface IDOTA2Events.
var SchemaDOTA2Events = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetArcanaVotes",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetCurrentTriviaQuestions",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetMutations",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetTriviaQuestionAnswersSummary",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IDOTA2Events",
		Undocumented: true,
	},
)

// DOTA2Events represents interface IDOTA2Events.
//
// This is an undocumented interface.
type DOTA2Events struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewDOTA2Events creates a new DOTA2Events interface.
func NewDOTA2Events(c *Client) (*DOTA2Events, error) {
	si, err := SchemaDOTA2Events.Get(geyser.SchemaInterfaceKey{Name: "IDOTA2Events"})

	if err != nil {
		return nil, err
	}

	s := &DOTA2Events{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2Events creates a new DOTA2Events interface.
func (c *Client) DOTA2Events() (*DOTA2Events, error) {
	return NewDOTA2Events(c)
}

/*
GetArcanaVotes creates a Request for interface method GetArcanaVotes.

This is an undocumented method.
*/
func (i *DOTA2Events) GetArcanaVotes() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetArcanaVotes",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2EventsGetArcanaVotes{},
	}

	return req, nil
}

/*
GetCurrentTriviaQuestions creates a Request for interface method GetCurrentTriviaQuestions.

This is an undocumented method.
*/
func (i *DOTA2Events) GetCurrentTriviaQuestions() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetCurrentTriviaQuestions",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2EventsGetCurrentTriviaQuestions{},
	}

	return req, nil
}

/*
GetMutations creates a Request for interface method GetMutations.

This is an undocumented method.
*/
func (i *DOTA2Events) GetMutations() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetMutations",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2EventsGetMutations{},
	}

	return req, nil
}

/*
GetTriviaQuestionAnswersSummary creates a Request for interface method GetTriviaQuestionAnswersSummary.

This is an undocumented method.
*/
func (i *DOTA2Events) GetTriviaQuestionAnswersSummary() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetTriviaQuestionAnswersSummary",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2EventsGetTriviaQuestionAnswersSummary{},
	}

	return req, nil
}
