// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2Fantasy.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaDOTA2Fantasy stores the SchemaInterfaces for interface IDOTA2Fantasy.
var SchemaDOTA2Fantasy = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetFantasyPlayerRawStats",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetLeaderboards",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetPlayerInfo",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetProPlayerInfo",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IDOTA2Fantasy",
		Undocumented: true,
	},
)

// DOTA2Fantasy represents interface IDOTA2Fantasy.
//
// This is an undocumented interface.
type DOTA2Fantasy struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewDOTA2Fantasy creates a new DOTA2Fantasy interface.
func NewDOTA2Fantasy(c *Client) (*DOTA2Fantasy, error) {
	si, err := SchemaDOTA2Fantasy.Get(geyser.SchemaInterfaceKey{Name: "IDOTA2Fantasy"})

	if err != nil {
		return nil, err
	}

	s := &DOTA2Fantasy{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2Fantasy creates a new DOTA2Fantasy interface.
func (c *Client) DOTA2Fantasy() (*DOTA2Fantasy, error) {
	return NewDOTA2Fantasy(c)
}

/*
GetFantasyPlayerRawStats creates a Request for interface method GetFantasyPlayerRawStats.

This is an undocumented method.
*/
func (i *DOTA2Fantasy) GetFantasyPlayerRawStats() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetFantasyPlayerRawStats",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2FantasyGetFantasyPlayerRawStats{},
	}

	return req, nil
}

/*
GetLeaderboards creates a Request for interface method GetLeaderboards.

This is an undocumented method.
*/
func (i *DOTA2Fantasy) GetLeaderboards() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetLeaderboards",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2FantasyGetLeaderboards{},
	}

	return req, nil
}

/*
GetPlayerInfo creates a Request for interface method GetPlayerInfo.

This is an undocumented method.
*/
func (i *DOTA2Fantasy) GetPlayerInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetPlayerInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2FantasyGetPlayerInfo{},
	}

	return req, nil
}

/*
GetProPlayerInfo creates a Request for interface method GetProPlayerInfo.

This is an undocumented method.
*/
func (i *DOTA2Fantasy) GetProPlayerInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetProPlayerInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2FantasyGetProPlayerInfo{},
	}

	return req, nil
}
