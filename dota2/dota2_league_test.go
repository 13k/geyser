// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewDOTA2League(t *testing.T) {
	client := &dota2.Client{}
	i, err := dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestDOTA2League_GetLeagueData(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetLeagueData
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueData()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueData", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetLeagueData)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetLeagueInfoList(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetLeagueInfoList
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueInfoList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueInfoList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetLeagueInfoList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetLeagueNodeResults(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetLeagueNodeResults
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLeagueNodeResults()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueNodeResults", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetLeagueNodeResults)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetLiveGames(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetLiveGames
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLiveGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLiveGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetLiveGames)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetPredictionResults(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetPredictionResults
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPredictionResults()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPredictionResults", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetPredictionResults)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetPredictions(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetPredictions
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPredictions()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPredictions", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetPredictions)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestDOTA2League_GetPrizePool(t *testing.T) {
	var i *dota2.DOTA2League
	var err error
	var req *geyser.Request
	var result *dota2.DOTA2LeagueGetPrizePool
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewDOTA2League(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPrizePool()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPrizePool", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.DOTA2LeagueGetPrizePool)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
