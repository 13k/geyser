// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2Match.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaDOTA2Match stores the SchemaInterfaces for interface IDOTA2Match.
var SchemaDOTA2Match = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetMatchMVPVotes",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetTopLiveEventGame",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetTopLiveGame",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetTopWeekendTourneyGames",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IDOTA2Match",
		Undocumented: true,
	},
)

// DOTA2Match represents interface IDOTA2Match.
//
// This is an undocumented interface.
type DOTA2Match struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewDOTA2Match creates a new DOTA2Match interface.
func NewDOTA2Match(c *Client) (*DOTA2Match, error) {
	si, err := SchemaDOTA2Match.Get(geyser.SchemaInterfaceKey{Name: "IDOTA2Match"})

	if err != nil {
		return nil, err
	}

	s := &DOTA2Match{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2Match creates a new DOTA2Match interface.
func (c *Client) DOTA2Match() (*DOTA2Match, error) {
	return NewDOTA2Match(c)
}

/*
GetMatchMVPVotes creates a Request for interface method GetMatchMVPVotes.

This is an undocumented method.
*/
func (i *DOTA2Match) GetMatchMVPVotes() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetMatchMVPVotes",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetMatchMVPVotes{},
	}

	return req, nil
}

/*
GetTopLiveEventGame creates a Request for interface method GetTopLiveEventGame.

This is an undocumented method.
*/
func (i *DOTA2Match) GetTopLiveEventGame() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetTopLiveEventGame",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopLiveEventGame{},
	}

	return req, nil
}

/*
GetTopLiveGame creates a Request for interface method GetTopLiveGame.

This is an undocumented method.
*/
func (i *DOTA2Match) GetTopLiveGame() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetTopLiveGame",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopLiveGame{},
	}

	return req, nil
}

/*
GetTopWeekendTourneyGames creates a Request for interface method GetTopWeekendTourneyGames.

This is an undocumented method.
*/
func (i *DOTA2Match) GetTopWeekendTourneyGames() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetTopWeekendTourneyGames",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopWeekendTourneyGames{},
	}

	return req, nil
}
