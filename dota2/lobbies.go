// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ILobbies.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaLobbies stores the SchemaInterfaces for interface ILobbies.
var SchemaLobbies = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetJoinableCustomLobbies",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "ILobbies",
		Undocumented: true,
	},
)

// Lobbies represents interface ILobbies.
//
// This is an undocumented interface.
type Lobbies struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewLobbies creates a new Lobbies interface.
func NewLobbies(c *Client) (*Lobbies, error) {
	si, err := SchemaLobbies.Get(geyser.SchemaInterfaceKey{Name: "ILobbies"})

	if err != nil {
		return nil, err
	}

	s := &Lobbies{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// Lobbies creates a new Lobbies interface.
func (c *Client) Lobbies() (*Lobbies, error) {
	return NewLobbies(c)
}

/*
GetJoinableCustomLobbies creates a Request for interface method GetJoinableCustomLobbies.

This is an undocumented method.
*/
func (i *Lobbies) GetJoinableCustomLobbies() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetJoinableCustomLobbies",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &LobbiesGetJoinableCustomLobbies{},
	}

	return req, nil
}
