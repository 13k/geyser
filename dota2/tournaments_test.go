// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewTournaments(t *testing.T) {
	client := &dota2.Client{}
	i, err := dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestTournaments_GetGroupStandings(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetGroupStandings
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGroupStandings()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGroupStandings", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetGroupStandings)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTournaments_GetLiveLeagueGames(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetLiveLeagueGames
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetLiveLeagueGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLiveLeagueGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetLiveLeagueGames)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTournaments_GetTournamentBrackets(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetTournamentBrackets
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentBrackets()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentBrackets", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetTournamentBrackets)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTournaments_GetTournamentInfo(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetTournamentInfo
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetTournamentInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTournaments_GetTournamentPlayers(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetTournamentPlayers
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentPlayers()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentPlayers", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetTournamentPlayers)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTournaments_GetTournamentSeriesDetails(t *testing.T) {
	var i *dota2.Tournaments
	var err error
	var req *geyser.Request
	var result *dota2.TournamentsGetTournamentSeriesDetails
	var ok bool

	client := &dota2.Client{}

	i, err = dota2.NewTournaments(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentSeriesDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentSeriesDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*dota2.TournamentsGetTournamentSeriesDetails)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
