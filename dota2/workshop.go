// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IWorkshop.

package dota2

import (
	"github.com/13k/geyser"
	"net/http"
)

// SchemaWorkshop stores the SchemaInterfaces for interface IWorkshop.
var SchemaWorkshop = geyser.MustNewSchemaInterfaces(
	&geyser.SchemaInterface{
		Methods: geyser.MustNewSchemaMethods(
			&geyser.SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetChangeLog",
				Params:       geyser.NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IWorkshop",
		Undocumented: true,
	},
)

// Workshop represents interface IWorkshop.
//
// This is an undocumented interface.
type Workshop struct {
	Client    *Client
	Interface *geyser.SchemaInterface
}

// NewWorkshop creates a new Workshop interface.
func NewWorkshop(c *Client) (*Workshop, error) {
	si, err := SchemaWorkshop.Get(geyser.SchemaInterfaceKey{Name: "IWorkshop"})

	if err != nil {
		return nil, err
	}

	s := &Workshop{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// Workshop creates a new Workshop interface.
func (c *Client) Workshop() (*Workshop, error) {
	return NewWorkshop(c)
}

/*
GetChangeLog creates a Request for interface method GetChangeLog.

This is an undocumented method.
*/
func (i *Workshop) GetChangeLog() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(geyser.SchemaMethodKey{
		Name:    "GetChangeLog",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &WorkshopGetChangeLog{},
	}

	return req, nil
}
