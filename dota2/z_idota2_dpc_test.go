// Code generated by geyser. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIDOTA2DPC(t *testing.T) {
	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestIDOTA2DPC_GetLeagueInfoList(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetLeagueInfoList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueInfoList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetLeagueMatchMinimal(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetLeagueMatchMinimal()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueMatchMinimal", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetLeagueNodeData(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetLeagueNodeData()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueNodeData", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetPlayerInfo(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetPlayerInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPlayerInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetRealtimeMatchStats(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetRealtimeMatchStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRealtimeMatchStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetRecentAndUpcomingMatches(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetRecentAndUpcomingMatches()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRecentAndUpcomingMatches", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetSingleTeamInfo(t *testing.T) {
	var ci *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetSingleTeamInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSingleTeamInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
