// Code generated by geyser. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIDOTA2DPC(t *testing.T) {
	client := &dota2.Client{}
	iface, err := dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	assert.Same(t, client, iface.Client)
	assert.NotNil(t, iface.Interface)
}

func TestIDOTA2DPC_GetLeagueInfoList(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetLeagueInfoList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueInfoList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetLeagueMatchMinimal(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetLeagueMatchMinimal()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueMatchMinimal", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetLeagueNodeData(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetLeagueNodeData()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLeagueNodeData", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetPlayerInfo(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetPlayerInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPlayerInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetRealtimeMatchStats(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetRealtimeMatchStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRealtimeMatchStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetRecentAndUpcomingMatches(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetRecentAndUpcomingMatches()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRecentAndUpcomingMatches", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2DPC_GetSingleTeamInfo(t *testing.T) {
	var iface *dota2.IDOTA2DPC
	var err error
	var req *geyser.Request

	client := &dota2.Client{}

	iface, err = dota2.NewIDOTA2DPC(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetSingleTeamInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSingleTeamInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
