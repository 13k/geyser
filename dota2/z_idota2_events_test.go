// Code generated by geyser. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIDOTA2Events(t *testing.T) {
	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := dota2.NewIDOTA2Events(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestIDOTA2Events_GetArcanaVotes(t *testing.T) {
	var ci *dota2.IDOTA2Events
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2Events(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetArcanaVotes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetArcanaVotes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2Events_GetCurrentTriviaQuestions(t *testing.T) {
	var ci *dota2.IDOTA2Events
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2Events(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetCurrentTriviaQuestions()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetCurrentTriviaQuestions", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2Events_GetMutations(t *testing.T) {
	var ci *dota2.IDOTA2Events
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2Events(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetMutations()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetMutations", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIDOTA2Events_GetTriviaQuestionAnswersSummary(t *testing.T) {
	var ci *dota2.IDOTA2Events
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewIDOTA2Events(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetTriviaQuestionAnswersSummary()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTriviaQuestionAnswersSummary", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
