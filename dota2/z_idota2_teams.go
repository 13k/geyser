// Code generated by geyser. DO NOT EDIT.
// API interface: IDOTA2Teams.

package dota2

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIDOTA2Teams stores the Interfaces for interface IDOTA2Teams.
var SchemaIDOTA2Teams = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetSingleTeamInfo",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IDOTA2Teams",
		Undocumented: true,
	},
)

// IDOTA2Teams represents interface IDOTA2Teams.
//
// This is an undocumented interface.
type IDOTA2Teams struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIDOTA2Teams creates a new IDOTA2Teams interface.
func NewIDOTA2Teams(c *Client) (*IDOTA2Teams, error) {
	si, err := SchemaIDOTA2Teams.Get(schema.InterfaceKey{Name: "IDOTA2Teams"})

	if err != nil {
		return nil, err
	}

	s := &IDOTA2Teams{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IDOTA2Teams creates a new IDOTA2Teams interface.
func (c *Client) IDOTA2Teams() (*IDOTA2Teams, error) {
	return NewIDOTA2Teams(c)
}

/*
GetSingleTeamInfo creates a Request for interface method GetSingleTeamInfo.

This is an undocumented method.
*/
func (i *IDOTA2Teams) GetSingleTeamInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetSingleTeamInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
