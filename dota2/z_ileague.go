// Code generated by geyser. DO NOT EDIT.
// API interface: ILeague.

package dota2

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaILeague stores the Interfaces for interface ILeague.
var SchemaILeague = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetLeagueInfo",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      2,
			},
		),
		Name:         "ILeague",
		Undocumented: true,
	},
)

// ILeague represents interface ILeague.
//
// This is an undocumented interface.
type ILeague struct {
	Client    *Client
	Interface *schema.Interface
}

// NewILeague creates a new ILeague interface.
func NewILeague(c *Client) (*ILeague, error) {
	si, err := SchemaILeague.Get(schema.InterfaceKey{Name: "ILeague"})

	if err != nil {
		return nil, err
	}

	s := &ILeague{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ILeague creates a new ILeague interface.
func (c *Client) ILeague() (*ILeague, error) {
	return NewILeague(c)
}

/*
GetLeagueInfo creates a Request for interface method GetLeagueInfo.

This is an undocumented method.
*/
func (i *ILeague) GetLeagueInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetLeagueInfo",
		Version: 2,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
