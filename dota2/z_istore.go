// Code generated by geyser. DO NOT EDIT.
// API interface: IStore.

package dota2

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIStore stores the Interfaces for interface IStore.
var SchemaIStore = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientStoreData",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IStore",
		Undocumented: true,
	},
)

// IStore represents interface IStore.
//
// This is an undocumented interface.
type IStore struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIStore creates a new IStore interface.
func NewIStore(c *Client) (*IStore, error) {
	si, err := SchemaIStore.Get(schema.InterfaceKey{Name: "IStore"})

	if err != nil {
		return nil, err
	}

	s := &IStore{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IStore creates a new IStore interface.
func (c *Client) IStore() (*IStore, error) {
	return NewIStore(c)
}

/*
GetClientStoreData creates a Request for interface method GetClientStoreData.

This is an undocumented method.
*/
func (i *IStore) GetClientStoreData() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetClientStoreData",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
