// Code generated by geyser. DO NOT EDIT.

package dota2_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/dota2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewITournaments(t *testing.T) {
	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestITournaments_GetGroupStandings(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetGroupStandings()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGroupStandings", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITournaments_GetLiveLeagueGames(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetLiveLeagueGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetLiveLeagueGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITournaments_GetTournamentBrackets(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetTournamentBrackets()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentBrackets", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITournaments_GetTournamentInfo(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetTournamentInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITournaments_GetTournamentPlayers(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetTournamentPlayers()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentPlayers", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITournaments_GetTournamentSeriesDetails(t *testing.T) {
	var ci *dota2.ITournaments
	var err error
	var req *geyser.Request

	client, err := dota2.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = dota2.NewITournaments(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetTournamentSeriesDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentSeriesDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
