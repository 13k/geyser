// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2Match

package geyser

import "net/http"

// SchemaDOTA2Match stores the SchemaInterfaces for interface IDOTA2Match
var SchemaDOTA2Match = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetLeagueListing",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetLiveLeagueGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Only show matches of the specified league id",
						Name:        "league_id",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Only show matches of the specified match id",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Match id",
						Name:        "match_id",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchHistory",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The ID of the hero that must be in the matches being queried",
						Name:        "hero_id",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Which game mode to return matches for",
						Name:        "game_mode",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The average skill range of the match, these can be [1-3] with lower numbers being lower skill. Ignored if an account ID is specified",
						Name:        "skill",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Minimum number of human players that must be in a match for it to be returned",
						Name:        "min_players",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "An account ID to get matches from. This will fail if the user has their match history hidden",
						Name:        "account_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The league ID to return games from",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The minimum match ID to start from",
						Name:        "start_at_match_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The number of requested matches to return",
						Name:        "matches_requested",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchHistoryBySequenceNum",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "start_at_match_seq_num",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "matches_requested",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTeamInfoByTeamID",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "start_at_team_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "teams_requested",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopLiveEventGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopLiveGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopWeekendTourneyGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
					&SchemaMethodParam{
						Description: "Prefer matches from this division.",
						Name:        "home_division",
						Optional:    true,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPlayerStats",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "account_id",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "hero_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "time_frame",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "phase_id",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPlayerStats",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "account_id",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "hero_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "time_frame",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "phase_id",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 2,
			},
		),
		Name: "IDOTA2Match_205790",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetLiveLeagueGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Only show matches of the specified league id",
						Name:        "league_id",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Only show matches of the specified match id",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Match id",
						Name:        "match_id",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Include persona names as part of the response",
						Name:        "include_persona_names",
						Optional:    true,
						Type:        "bool",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchHistory",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The ID of the hero that must be in the matches being queried",
						Name:        "hero_id",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Which game mode to return matches for",
						Name:        "game_mode",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The average skill range of the match, these can be [1-3] with lower numbers being lower skill. Ignored if an account ID is specified",
						Name:        "skill",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Minimum number of human players that must be in a match for it to be returned",
						Name:        "min_players",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "An account ID to get matches from. This will fail if the user has their match history hidden",
						Name:        "account_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The league ID to return games from",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The minimum match ID to start from",
						Name:        "start_at_match_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The number of requested matches to return",
						Name:        "matches_requested",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetMatchHistoryBySequenceNum",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "start_at_match_seq_num",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "matches_requested",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTeamInfoByTeamID",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "start_at_team_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "teams_requested",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopLiveEventGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopLiveGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTopWeekendTourneyGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Which partner's games to use.",
						Name:        "partner",
						Optional:    false,
						Type:        "int32",
					},
					&SchemaMethodParam{
						Description: "Prefer matches from this division.",
						Name:        "home_division",
						Optional:    true,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPlayerStats",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "account_id",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "hero_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "time_frame",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPlayerStats",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "account_id",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "league_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "hero_id",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "time_frame",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "match_id",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "phase_id",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 2,
			},
		),
		Name: "IDOTA2Match_570",
	},
)

// DOTA2Match represents interface IDOTA2Match
// Supported AppIDs: [205790 570]
type DOTA2Match struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewDOTA2Match creates a new DOTA2Match interface
func NewDOTA2Match(c *Client, appID uint32) (*DOTA2Match, error) {
	si, err := SchemaDOTA2Match.Get("IDOTA2Match", appID)

	if err != nil {
		return nil, err
	}

	s := &DOTA2Match{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2Match creates a new DOTA2Match interface
func (c *Client) DOTA2Match(appID uint32) (*DOTA2Match, error) {
	return NewDOTA2Match(c, appID)
}

// GetLiveLeagueGames creates a Request for interface method GetLiveLeagueGames
func (i *DOTA2Match) GetLiveLeagueGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetLiveLeagueGames", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetLiveLeagueGames{},
	}

	return req, nil
}

// GetTournamentPlayerStats creates a Request for interface method GetTournamentPlayerStats
// Supported versions: [1 2]
func (i *DOTA2Match) GetTournamentPlayerStats(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentPlayerStats", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTournamentPlayerStats{},
	}

	return req, nil
}

// GetTopWeekendTourneyGames creates a Request for interface method GetTopWeekendTourneyGames
func (i *DOTA2Match) GetTopWeekendTourneyGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTopWeekendTourneyGames", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopWeekendTourneyGames{},
	}

	return req, nil
}

// GetMatchHistory creates a Request for interface method GetMatchHistory
func (i *DOTA2Match) GetMatchHistory() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetMatchHistory", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetMatchHistory{},
	}

	return req, nil
}

// GetTopLiveEventGame creates a Request for interface method GetTopLiveEventGame
func (i *DOTA2Match) GetTopLiveEventGame() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTopLiveEventGame", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopLiveEventGame{},
	}

	return req, nil
}

// GetLeagueListing creates a Request for interface method GetLeagueListing
func (i *DOTA2Match) GetLeagueListing() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetLeagueListing", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetLeagueListing{},
	}

	return req, nil
}

// GetTopLiveGame creates a Request for interface method GetTopLiveGame
func (i *DOTA2Match) GetTopLiveGame() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTopLiveGame", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTopLiveGame{},
	}

	return req, nil
}

// GetTeamInfoByTeamID creates a Request for interface method GetTeamInfoByTeamID
func (i *DOTA2Match) GetTeamInfoByTeamID() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTeamInfoByTeamID", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetTeamInfoByTeamID{},
	}

	return req, nil
}

// GetMatchDetails creates a Request for interface method GetMatchDetails
func (i *DOTA2Match) GetMatchDetails() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetMatchDetails", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetMatchDetails{},
	}

	return req, nil
}

// GetMatchHistoryBySequenceNum creates a Request for interface method GetMatchHistoryBySequenceNum
func (i *DOTA2Match) GetMatchHistoryBySequenceNum() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetMatchHistoryBySequenceNum", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2MatchGetMatchHistoryBySequenceNum{},
	}

	return req, nil
}
