// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IDOTA2Ticket.

package geyser

import "net/http"

// SchemaDOTA2Ticket stores the SchemaInterfaces for interface IDOTA2Ticket.
var SchemaDOTA2Ticket = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "ClaimBadgeReward",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Badge ID",
						Name:        "BadgeID",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 1",
						Name:        "ValidBadgeType1",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 2",
						Name:        "ValidBadgeType2",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 3",
						Name:        "ValidBadgeType3",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSteamIDForBadgeID",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The badge ID",
						Name:        "BadgeID",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SetSteamAccountPurchased",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The 64-bit Steam ID",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Badge Type",
						Name:        "BadgeType",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "SteamAccountValidForBadgeType",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The 64-bit Steam ID",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 1",
						Name:        "ValidBadgeType1",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 2",
						Name:        "ValidBadgeType2",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 3",
						Name:        "ValidBadgeType3",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IDOTA2Ticket_205790",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "ClaimBadgeReward",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Badge ID",
						Name:        "BadgeID",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 1",
						Name:        "ValidBadgeType1",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 2",
						Name:        "ValidBadgeType2",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 3",
						Name:        "ValidBadgeType3",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSteamIDForBadgeID",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The badge ID",
						Name:        "BadgeID",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SetSteamAccountPurchased",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The 64-bit Steam ID",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Badge Type",
						Name:        "BadgeType",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "SteamAccountValidForBadgeType",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The 64-bit Steam ID",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 1",
						Name:        "ValidBadgeType1",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 2",
						Name:        "ValidBadgeType2",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Valid Badge Type 3",
						Name:        "ValidBadgeType3",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IDOTA2Ticket_570",
	},
)

// DOTA2Ticket represents interface IDOTA2Ticket.
//
// Supported AppIDs: [570 205790].
type DOTA2Ticket struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewDOTA2Ticket creates a new DOTA2Ticket interface.
//
// Supported AppIDs: [570 205790].
func NewDOTA2Ticket(c *Client, appID uint32) (*DOTA2Ticket, error) {
	si, err := SchemaDOTA2Ticket.Get("IDOTA2Ticket", appID)

	if err != nil {
		return nil, err
	}

	s := &DOTA2Ticket{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// DOTA2Ticket creates a new DOTA2Ticket interface.
//
// Supported AppIDs: [570 205790].
func (c *Client) DOTA2Ticket(appID uint32) (*DOTA2Ticket, error) {
	return NewDOTA2Ticket(c, appID)
}

// SetSteamAccountPurchased creates a Request for interface method SetSteamAccountPurchased.
func (i *DOTA2Ticket) SetSteamAccountPurchased() (*Request, error) {
	sm, err := i.Interface.Methods.Get("SetSteamAccountPurchased", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2TicketSetSteamAccountPurchased{},
	}

	return req, nil
}

// SteamAccountValidForBadgeType creates a Request for interface method SteamAccountValidForBadgeType.
func (i *DOTA2Ticket) SteamAccountValidForBadgeType() (*Request, error) {
	sm, err := i.Interface.Methods.Get("SteamAccountValidForBadgeType", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2TicketSteamAccountValidForBadgeType{},
	}

	return req, nil
}

// ClaimBadgeReward creates a Request for interface method ClaimBadgeReward.
func (i *DOTA2Ticket) ClaimBadgeReward() (*Request, error) {
	sm, err := i.Interface.Methods.Get("ClaimBadgeReward", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2TicketClaimBadgeReward{},
	}

	return req, nil
}

// GetSteamIDForBadgeID creates a Request for interface method GetSteamIDForBadgeID.
func (i *DOTA2Ticket) GetSteamIDForBadgeID() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSteamIDForBadgeID", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &DOTA2TicketGetSteamIDForBadgeID{},
	}

	return req, nil
}
