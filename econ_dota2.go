// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IEconDOTA2

package geyser

import "net/http"

// SchemaEconDOTA2 stores the SchemaInterfaces for interface IEconDOTA2
var SchemaEconDOTA2 = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetEventStatsForAccount",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The League ID of the compendium you're looking for.",
						Name:        "eventid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The account ID to look up.",
						Name:        "accountid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The language to provide hero names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGameItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide item names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetHeroes",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide hero names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Return a list of itemized heroes only.",
						Name:        "itemizedonly",
						Optional:    true,
						Type:        "bool",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetItemIconPath",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The item icon name to get the CDN path of",
						Name:        "iconname",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The type of image you want. 0 = normal, 1 = large, 2 = ingame",
						Name:        "icontype",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetRarities",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide rarity names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPrizePool",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The ID of the league to get the prize pool of",
						Name:        "leagueid",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconDOTA2_205790",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetEventStatsForAccount",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The League ID of the compendium you're looking for.",
						Name:        "eventid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The account ID to look up.",
						Name:        "accountid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The language to provide hero names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGameItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide item names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetHeroes",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide hero names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Return a list of itemized heroes only.",
						Name:        "itemizedonly",
						Optional:    true,
						Type:        "bool",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetItemCreators",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The item definition to get creator information for.",
						Name:        "itemdef",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetRarities",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to provide rarity names in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTournamentPrizePool",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The ID of the league to get the prize pool of",
						Name:        "leagueid",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconDOTA2_570",
	},
)

// EconDOTA2 represents interface IEconDOTA2
// Supported AppIDs: [205790 570]
type EconDOTA2 struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewEconDOTA2 creates a new EconDOTA2 interface
func NewEconDOTA2(c *Client, appID uint32) (*EconDOTA2, error) {
	si, err := SchemaEconDOTA2.Get("IEconDOTA2", appID)

	if err != nil {
		return nil, err
	}

	s := &EconDOTA2{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// EconDOTA2 creates a new EconDOTA2 interface
func (c *Client) EconDOTA2(appID uint32) (*EconDOTA2, error) {
	return NewEconDOTA2(c, appID)
}

// GetGameItems creates a Request for interface method GetGameItems
func (i *EconDOTA2) GetGameItems() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetGameItems", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetGameItems{},
	}

	return req, nil
}

// GetHeroes creates a Request for interface method GetHeroes
func (i *EconDOTA2) GetHeroes() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetHeroes", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetHeroes{},
	}

	return req, nil
}

// GetItemIconPath creates a Request for interface method GetItemIconPath
func (i *EconDOTA2) GetItemIconPath() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetItemIconPath", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetItemIconPath{},
	}

	return req, nil
}

// GetRarities creates a Request for interface method GetRarities
func (i *EconDOTA2) GetRarities() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetRarities", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetRarities{},
	}

	return req, nil
}

// GetTournamentPrizePool creates a Request for interface method GetTournamentPrizePool
func (i *EconDOTA2) GetTournamentPrizePool() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTournamentPrizePool", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetTournamentPrizePool{},
	}

	return req, nil
}

// GetEventStatsForAccount creates a Request for interface method GetEventStatsForAccount
func (i *EconDOTA2) GetEventStatsForAccount() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetEventStatsForAccount", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetEventStatsForAccount{},
	}

	return req, nil
}

// GetItemCreators creates a Request for interface method GetItemCreators
func (i *EconDOTA2) GetItemCreators() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetItemCreators", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconDOTA2GetItemCreators{},
	}

	return req, nil
}
