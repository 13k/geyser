// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewEconDOTA2(t *testing.T) {
	client := &geyser.Client{}
	appIDs := []uint32{570, 205790}

	for _, appID := range appIDs {
		i, err := geyser.NewEconDOTA2(client, appID)

		require.NoError(t, err)
		require.NotNil(t, i)

		assert.Same(t, client, i.Client)
		assert.NotNil(t, i.Interface)
	}
}

func TestEconDOTA2_GetEventStatsForAccount(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetEventStatsForAccount
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetEventStatsForAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetEventStatsForAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetEventStatsForAccount)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetEventStatsForAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetEventStatsForAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetEventStatsForAccount)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconDOTA2_GetGameItems(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetGameItems
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGameItems()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGameItems", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetGameItems)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGameItems()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGameItems", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetGameItems)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconDOTA2_GetHeroes(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetHeroes
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetHeroes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetHeroes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetHeroes)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetHeroes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetHeroes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetHeroes)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconDOTA2_GetItemCreators(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetItemCreators
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemCreators()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemCreators", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetItemCreators)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemCreators()

	require.Error(t, err)

	_, ok = err.(*geyser.InterfaceMethodNotFoundError)

	assert.Truef(t, ok, "invalid error type %T", err)
}

func TestEconDOTA2_GetItemIconPath(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetItemIconPath
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemIconPath()

	require.Error(t, err)

	_, ok = err.(*geyser.InterfaceMethodNotFoundError)

	assert.Truef(t, ok, "invalid error type %T", err)

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemIconPath()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemIconPath", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetItemIconPath)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconDOTA2_GetRarities(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetRarities
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRarities()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRarities", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetRarities)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRarities()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRarities", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetRarities)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconDOTA2_GetTournamentPrizePool(t *testing.T) {
	var i *geyser.EconDOTA2
	var err error
	var req *geyser.Request
	var result *geyser.EconDOTA2GetTournamentPrizePool
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconDOTA2(client, 570)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentPrizePool()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentPrizePool", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetTournamentPrizePool)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewEconDOTA2(client, 205790)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTournamentPrizePool()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTournamentPrizePool", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconDOTA2GetTournamentPrizePool)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
