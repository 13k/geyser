// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IEconItems.

package geyser

import "net/http"

// SchemaEconItems stores the SchemaInterfaces for interface IEconItems.
var SchemaEconItems = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetEquippedPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Return items equipped for this class id",
						Name:        "class_id",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaURL",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetStoreMetaData",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to results in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_205790",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_221540",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_238460",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchema",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to return the names in. Defaults to returning string keys.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to return the names in. Defaults to returning string keys.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The first item id to return. Defaults to 0. Response will indicate next value to query if applicable.",
						Name:        "start",
						Optional:    true,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaOverview",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to return the names in. Defaults to returning string keys.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaURL",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetStoreMetaData",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to results in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetStoreStatus",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IEconItems_440",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetEquippedPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Return items equipped for this class id",
						Name:        "class_id",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaURL",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetStoreMetaData",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to results in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_570",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetEquippedPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Return items equipped for this class id",
						Name:        "class_id",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_583950",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchema",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to return the names in. Defaults to returning string keys.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_620",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerItems",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The Steam ID to fetch items for",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchema",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to return the names in. Defaults to returning string keys.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 2,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaURL",
				Params:     NewSchemaMethodParams(),
				Version:    2,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetStoreMetaData",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The language to results in.",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "IEconItems_730",
	},
)

// EconItems represents interface IEconItems.
//
// Supported AppIDs: [583950 620 730 205790 221540 238460 440 570].
type EconItems struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewEconItems creates a new EconItems interface.
//
// Supported AppIDs: [583950 620 730 205790 221540 238460 440 570].
func NewEconItems(c *Client, appID uint32) (*EconItems, error) {
	si, err := SchemaEconItems.Get("IEconItems", appID)

	if err != nil {
		return nil, err
	}

	s := &EconItems{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// EconItems creates a new EconItems interface.
//
// Supported AppIDs: [583950 620 730 205790 221540 238460 440 570].
func (c *Client) EconItems(appID uint32) (*EconItems, error) {
	return NewEconItems(c, appID)
}

// GetPlayerItems creates a Request for interface method GetPlayerItems.
func (i *EconItems) GetPlayerItems() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetPlayerItems", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetPlayerItems{},
	}

	return req, nil
}

// GetSchemaURL creates a Request for interface method GetSchemaURL.
//
// Supported versions: [1 2].
func (i *EconItems) GetSchemaURL(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSchemaURL", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetSchemaURL{},
	}

	return req, nil
}

// GetStoreMetaData creates a Request for interface method GetStoreMetaData.
func (i *EconItems) GetStoreMetaData() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetStoreMetaData", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetStoreMetaData{},
	}

	return req, nil
}

// GetSchema creates a Request for interface method GetSchema.
//
// Supported versions: [1 2].
func (i *EconItems) GetSchema(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSchema", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetSchema{},
	}

	return req, nil
}

// GetSchemaItems creates a Request for interface method GetSchemaItems.
func (i *EconItems) GetSchemaItems() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSchemaItems", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetSchemaItems{},
	}

	return req, nil
}

// GetSchemaOverview creates a Request for interface method GetSchemaOverview.
func (i *EconItems) GetSchemaOverview() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSchemaOverview", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetSchemaOverview{},
	}

	return req, nil
}

// GetStoreStatus creates a Request for interface method GetStoreStatus.
func (i *EconItems) GetStoreStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetStoreStatus", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetStoreStatus{},
	}

	return req, nil
}

// GetEquippedPlayerItems creates a Request for interface method GetEquippedPlayerItems.
func (i *EconItems) GetEquippedPlayerItems() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetEquippedPlayerItems", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconItemsGetEquippedPlayerItems{},
	}

	return req, nil
}
