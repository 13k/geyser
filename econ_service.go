// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IEconService.

package geyser

import "net/http"

// SchemaEconService stores the SchemaInterfaces for interface IEconService.
var SchemaEconService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeHistory",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The number of trades to return information for",
						Name:        "max_trades",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The time of the last trade shown on the previous page of results, or the time of the first trade if navigating back",
						Name:        "start_after_time",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The tradeid shown on the previous page of results, or the ID of the first trade if navigating back",
						Name:        "start_after_tradeid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The user wants the previous page of results, so return the previous max_trades trades before the start time and ID",
						Name:        "navigating_back",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "If set, the item display data for the items included in the returned trades will also be returned",
						Name:        "get_descriptions",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "The language to use when loading item display data",
						Name:        "language",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "include_failed",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "If set, the total number of trades the account has participated in will be included in the response",
						Name:        "include_total",
						Optional:    false,
						Type:        "bool",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeStatus",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "tradeid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "If set, the item display data for the items included in the returned trades will also be returned",
						Name:        "get_descriptions",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "The language to use when loading item display data",
						Name:        "language",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeOffers",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Request the list of sent offers.",
						Name:        "get_sent_offers",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Request the list of received offers.",
						Name:        "get_received_offers",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
						Name:        "get_descriptions",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "The language to use when loading item display data.",
						Name:        "language",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Indicates we should only return offers which are still active, or offers that have changed in state since the time_historical_cutoff",
						Name:        "active_only",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Indicates we should only return offers which are not active.",
						Name:        "historical_only",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "When active_only is set, offers updated since this time will also be returned",
						Name:        "time_historical_cutoff",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeOffer",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "tradeofferid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "language",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
						Name:        "get_descriptions",
						Optional:    false,
						Type:        "bool",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeOffersSummary",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The time the user last visited.  If not passed, will use the time the user last visited the trade offer page.",
						Name:        "time_last_visit",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "DeclineTradeOffer",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "tradeofferid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "CancelTradeOffer",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "tradeofferid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTradeHoldDurations",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "User you are trading with",
						Name:        "steamid_target",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "A special token that allows for trade offers from non-friends.",
						Name:        "trade_offer_access_token",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IEconService",
		Undocumented: false,
	},
)

// EconService represents interface IEconService.
type EconService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewEconService creates a new EconService interface.
func NewEconService(c *Client) (*EconService, error) {
	si, err := SchemaEconService.Get(SchemaInterfaceKey{Name: "IEconService"})

	if err != nil {
		return nil, err
	}

	s := &EconService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// EconService creates a new EconService interface.
func (c *Client) EconService() (*EconService, error) {
	return NewEconService(c)
}

/*
CancelTradeOffer creates a Request for interface method CancelTradeOffer.

Parameters

  * key [string] (required): Access key
  * tradeofferid [uint64] (required)
*/
func (i *EconService) CancelTradeOffer() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "CancelTradeOffer",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceCancelTradeOffer{},
	}

	return req, nil
}

/*
DeclineTradeOffer creates a Request for interface method DeclineTradeOffer.

Parameters

  * key [string] (required): Access key
  * tradeofferid [uint64] (required)
*/
func (i *EconService) DeclineTradeOffer() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "DeclineTradeOffer",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceDeclineTradeOffer{},
	}

	return req, nil
}

/*
GetTradeHistory creates a Request for interface method GetTradeHistory.

Parameters

  * key [string] (required): Access key
  * max_trades [uint32] (required): The number of trades to return information for
  * start_after_time [uint32] (required): The time of the last trade shown on the previous page of results, or the time of the first trade if navigating back
  * start_after_tradeid [uint64] (required): The tradeid shown on the previous page of results, or the ID of the first trade if navigating back
  * navigating_back [bool] (required): The user wants the previous page of results, so return the previous max_trades trades before the start time and ID
  * get_descriptions [bool] (required): If set, the item display data for the items included in the returned trades will also be returned
  * language [string] (required): The language to use when loading item display data
  * include_failed [bool] (required)
  * include_total [bool] (required): If set, the total number of trades the account has participated in will be included in the response
*/
func (i *EconService) GetTradeHistory() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeHistory",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeHistory{},
	}

	return req, nil
}

/*
GetTradeHoldDurations creates a Request for interface method GetTradeHoldDurations.

Parameters

  * key [string] (required): Access key
  * steamid_target [uint64] (required): User you are trading with
  * trade_offer_access_token [string] (required): A special token that allows for trade offers from non-friends.
*/
func (i *EconService) GetTradeHoldDurations() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeHoldDurations",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeHoldDurations{},
	}

	return req, nil
}

/*
GetTradeOffer creates a Request for interface method GetTradeOffer.

Parameters

  * key [string] (required): Access key
  * tradeofferid [uint64] (required)
  * language [string] (required)
  * get_descriptions [bool] (required): If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.
*/
func (i *EconService) GetTradeOffer() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeOffer",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeOffer{},
	}

	return req, nil
}

/*
GetTradeOffers creates a Request for interface method GetTradeOffers.

Parameters

  * key [string] (required): Access key
  * get_sent_offers [bool] (required): Request the list of sent offers.
  * get_received_offers [bool] (required): Request the list of received offers.
  * get_descriptions [bool] (required): If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.
  * language [string] (required): The language to use when loading item display data.
  * active_only [bool] (required): Indicates we should only return offers which are still active, or offers that have changed in state since the time_historical_cutoff
  * historical_only [bool] (required): Indicates we should only return offers which are not active.
  * time_historical_cutoff [uint32] (required): When active_only is set, offers updated since this time will also be returned
*/
func (i *EconService) GetTradeOffers() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeOffers",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeOffers{},
	}

	return req, nil
}

/*
GetTradeOffersSummary creates a Request for interface method GetTradeOffersSummary.

Parameters

  * key [string] (required): Access key
  * time_last_visit [uint32] (required): The time the user last visited.  If not passed, will use the time the user last visited the trade offer page.
*/
func (i *EconService) GetTradeOffersSummary() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeOffersSummary",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeOffersSummary{},
	}

	return req, nil
}

/*
GetTradeStatus creates a Request for interface method GetTradeStatus.

Parameters

  * key [string] (required): Access key
  * tradeid [uint64] (required)
  * get_descriptions [bool] (required): If set, the item display data for the items included in the returned trades will also be returned
  * language [string] (required): The language to use when loading item display data
*/
func (i *EconService) GetTradeStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetTradeStatus",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &EconServiceGetTradeStatus{},
	}

	return req, nil
}
