// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewEconService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestEconService_CancelTradeOffer(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceCancelTradeOffer
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CancelTradeOffer()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CancelTradeOffer", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceCancelTradeOffer)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_DeclineTradeOffer(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceDeclineTradeOffer
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.DeclineTradeOffer()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "DeclineTradeOffer", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceDeclineTradeOffer)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeHistory(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeHistory
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeHistory()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeHistory", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeHistory)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeHoldDurations(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeHoldDurations
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeHoldDurations()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeHoldDurations", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeHoldDurations)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeOffer(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeOffer
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeOffer()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeOffer", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeOffer)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeOffers(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeOffers
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeOffers()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeOffers", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeOffers)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeOffersSummary(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeOffersSummary
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeOffersSummary()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeOffersSummary", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeOffersSummary)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestEconService_GetTradeStatus(t *testing.T) {
	var i *geyser.EconService
	var err error
	var req *geyser.Request
	var result *geyser.EconServiceGetTradeStatus
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewEconService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTradeStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTradeStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.EconServiceGetTradeStatus)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
