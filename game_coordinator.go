// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IGameCoordinator.

package geyser

import "net/http"

// SchemaGameCoordinator stores the SchemaInterfaces for interface IGameCoordinator.
var SchemaGameCoordinator = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetMessages",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "PostMessages",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IGameCoordinator",
		Undocumented: true,
	},
)

// GameCoordinator represents interface IGameCoordinator.
//
// This is an undocumented interface.
type GameCoordinator struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewGameCoordinator creates a new GameCoordinator interface.
func NewGameCoordinator(c *Client) (*GameCoordinator, error) {
	si, err := SchemaGameCoordinator.Get(SchemaInterfaceKey{Name: "IGameCoordinator"})

	if err != nil {
		return nil, err
	}

	s := &GameCoordinator{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// GameCoordinator creates a new GameCoordinator interface.
func (c *Client) GameCoordinator() (*GameCoordinator, error) {
	return NewGameCoordinator(c)
}

/*
GetMessages creates a Request for interface method GetMessages.

This is an undocumented method.
*/
func (i *GameCoordinator) GetMessages() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetMessages",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameCoordinatorGetMessages{},
	}

	return req, nil
}

/*
PostMessages creates a Request for interface method PostMessages.

This is an undocumented method.
*/
func (i *GameCoordinator) PostMessages() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "PostMessages",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameCoordinatorPostMessages{},
	}

	return req, nil
}
