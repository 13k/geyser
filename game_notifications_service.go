// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IGameNotificationsService.

package geyser

import "net/http"

// SchemaGameNotificationsService stores the SchemaInterfaces for interface IGameNotificationsService.
var SchemaGameNotificationsService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "UserCreateSession",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The appid to create the session for.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Game-specified context value the game can used to associate the session with some object on their backend.",
						Name:        "context",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The title of the session to be displayed within each user's list of sessions.",
						Name:        "title",
						Optional:    false,
						Type:        "{message}",
					},
					&SchemaMethodParam{
						Description: "The initial state of all users in the session.",
						Name:        "users",
						Optional:    false,
						Type:        "{message}",
					},
					&SchemaMethodParam{
						Description: "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "UserUpdateSession",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The sessionid to update.",
						Name:        "sessionid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The appid of the session to update.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "(Optional) The new title of the session.  If not specified, the title will not be changed.",
						Name:        "title",
						Optional:    false,
						Type:        "{message}",
					},
					&SchemaMethodParam{
						Description: "(Optional) A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it.",
						Name:        "users",
						Optional:    false,
						Type:        "{message}",
					},
					&SchemaMethodParam{
						Description: "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "UserDeleteSession",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "The sessionid to delete.",
						Name:        "sessionid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The appid of the session to delete.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "(Optional) steamid to make the request on behalf of -- if specified, the user must be in the session.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
		),
		Name: "IGameNotificationsService",
	},
)

// GameNotificationsService represents interface IGameNotificationsService.
type GameNotificationsService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewGameNotificationsService creates a new GameNotificationsService interface.
func NewGameNotificationsService(c *Client) (*GameNotificationsService, error) {
	si, err := SchemaGameNotificationsService.Get("IGameNotificationsService", 0)

	if err != nil {
		return nil, err
	}

	s := &GameNotificationsService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// GameNotificationsService creates a new GameNotificationsService interface.
func (c *Client) GameNotificationsService() (*GameNotificationsService, error) {
	return NewGameNotificationsService(c)
}

// UserCreateSession creates a Request for interface method UserCreateSession.
func (i *GameNotificationsService) UserCreateSession() (*Request, error) {
	sm, err := i.Interface.Methods.Get("UserCreateSession", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameNotificationsServiceUserCreateSession{},
	}

	return req, nil
}

// UserUpdateSession creates a Request for interface method UserUpdateSession.
func (i *GameNotificationsService) UserUpdateSession() (*Request, error) {
	sm, err := i.Interface.Methods.Get("UserUpdateSession", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameNotificationsServiceUserUpdateSession{},
	}

	return req, nil
}

// UserDeleteSession creates a Request for interface method UserDeleteSession.
func (i *GameNotificationsService) UserDeleteSession() (*Request, error) {
	sm, err := i.Interface.Methods.Get("UserDeleteSession", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameNotificationsServiceUserDeleteSession{},
	}

	return req, nil
}
