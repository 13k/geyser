// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IGameServersService.

package geyser

import "net/http"

// SchemaGameServersService stores the SchemaInterfaces for interface IGameServersService.
var SchemaGameServersService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetAccountList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "CreateAccount",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The app to use the account for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The memo to set on the new account",
						Name:        "memo",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SetMemo",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the game server to set the memo on",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The memo to set on the new account",
						Name:        "memo",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "ResetLoginToken",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the game server to reset the login token of",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "DeleteAccount",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the game server account to delete",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetAccountPublicInfo",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The SteamID of the game server to get info on",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "QueryLoginToken",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Login token to query",
						Name:        "login_token",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerSteamIDsByIP",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "server_ips",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerIPsBySteamID",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "server_steamids",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerList",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IGameServersService",
		Undocumented: false,
	},
)

// GameServersService represents interface IGameServersService.
type GameServersService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewGameServersService creates a new GameServersService interface.
func NewGameServersService(c *Client) (*GameServersService, error) {
	si, err := SchemaGameServersService.Get(SchemaInterfaceKey{Name: "IGameServersService"})

	if err != nil {
		return nil, err
	}

	s := &GameServersService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// GameServersService creates a new GameServersService interface.
func (c *Client) GameServersService() (*GameServersService, error) {
	return NewGameServersService(c)
}

/*
CreateAccount creates a Request for interface method CreateAccount.

Parameters

  * key [string] (required): Access key
  * appid [uint32] (required): The app to use the account for
  * memo [string] (required): The memo to set on the new account
*/
func (i *GameServersService) CreateAccount() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "CreateAccount",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceCreateAccount{},
	}

	return req, nil
}

/*
DeleteAccount creates a Request for interface method DeleteAccount.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server account to delete
*/
func (i *GameServersService) DeleteAccount() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "DeleteAccount",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceDeleteAccount{},
	}

	return req, nil
}

/*
GetAccountList creates a Request for interface method GetAccountList.

Parameters

  * key [string] (required): Access key
*/
func (i *GameServersService) GetAccountList() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetAccountList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceGetAccountList{},
	}

	return req, nil
}

/*
GetAccountPublicInfo creates a Request for interface method GetAccountPublicInfo.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to get info on
*/
func (i *GameServersService) GetAccountPublicInfo() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetAccountPublicInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceGetAccountPublicInfo{},
	}

	return req, nil
}

/*
GetServerIPsBySteamID creates a Request for interface method GetServerIPsBySteamID.

Parameters

  * key [string] (required): Access key
  * server_steamids [uint64] (required)
*/
func (i *GameServersService) GetServerIPsBySteamID() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetServerIPsBySteamID",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceGetServerIPsBySteamID{},
	}

	return req, nil
}

/*
GetServerList creates a Request for interface method GetServerList.

This is an undocumented method.
*/
func (i *GameServersService) GetServerList() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetServerList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceGetServerList{},
	}

	return req, nil
}

/*
GetServerSteamIDsByIP creates a Request for interface method GetServerSteamIDsByIP.

Parameters

  * key [string] (required): Access key
  * server_ips [string] (required)
*/
func (i *GameServersService) GetServerSteamIDsByIP() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetServerSteamIDsByIP",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceGetServerSteamIDsByIP{},
	}

	return req, nil
}

/*
QueryLoginToken creates a Request for interface method QueryLoginToken.

Parameters

  * key [string] (required): Access key
  * login_token [string] (required): Login token to query
*/
func (i *GameServersService) QueryLoginToken() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "QueryLoginToken",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceQueryLoginToken{},
	}

	return req, nil
}

/*
ResetLoginToken creates a Request for interface method ResetLoginToken.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to reset the login token of
*/
func (i *GameServersService) ResetLoginToken() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "ResetLoginToken",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceResetLoginToken{},
	}

	return req, nil
}

/*
SetMemo creates a Request for interface method SetMemo.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to set the memo on
  * memo [string] (required): The memo to set on the new account
*/
func (i *GameServersService) SetMemo() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "SetMemo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GameServersServiceSetMemo{},
	}

	return req, nil
}
