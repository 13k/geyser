// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewGameServersService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestGameServersService_CreateAccount(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceCreateAccount
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CreateAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CreateAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceCreateAccount)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_DeleteAccount(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceDeleteAccount
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.DeleteAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "DeleteAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceDeleteAccount)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_GetAccountList(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceGetAccountList
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetAccountList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAccountList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceGetAccountList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_GetAccountPublicInfo(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceGetAccountPublicInfo
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetAccountPublicInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAccountPublicInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceGetAccountPublicInfo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_GetServerIPsBySteamID(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceGetServerIPsBySteamID
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetServerIPsBySteamID()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerIPsBySteamID", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceGetServerIPsBySteamID)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_GetServerList(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceGetServerList
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetServerList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceGetServerList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_GetServerSteamIDsByIP(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceGetServerSteamIDsByIP
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetServerSteamIDsByIP()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerSteamIDsByIP", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceGetServerSteamIDsByIP)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_QueryLoginToken(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceQueryLoginToken
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.QueryLoginToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryLoginToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceQueryLoginToken)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_ResetLoginToken(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceResetLoginToken
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.ResetLoginToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ResetLoginToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceResetLoginToken)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestGameServersService_SetMemo(t *testing.T) {
	var i *geyser.GameServersService
	var err error
	var req *geyser.Request
	var result *geyser.GameServersServiceSetMemo
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetMemo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetMemo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.GameServersServiceSetMemo)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
