// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IGCVersion

package geyser

import "net/http"

// SchemaGCVersion stores the SchemaInterfaces for interface IGCVersion
var SchemaGCVersion = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetClientVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_1046930",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetClientVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_205790",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetClientVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_440",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetClientVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_570",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetClientVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_583950",
	},
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerVersion",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "IGCVersion_730",
	},
)

// GCVersion represents interface IGCVersion
// Supported AppIDs: [1046930 205790 440 570 583950 730]
type GCVersion struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewGCVersion creates a new GCVersion interface
func NewGCVersion(c *Client, appID uint32) (*GCVersion, error) {
	si, err := SchemaGCVersion.Get("IGCVersion", appID)

	if err != nil {
		return nil, err
	}

	s := &GCVersion{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// GCVersion creates a new GCVersion interface
func (c *Client) GCVersion(appID uint32) (*GCVersion, error) {
	return NewGCVersion(c, appID)
}

// GetClientVersion creates a Request for interface method GetClientVersion
func (i *GCVersion) GetClientVersion() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetClientVersion", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GCVersionGetClientVersion{},
	}

	return req, nil
}

// GetServerVersion creates a Request for interface method GetServerVersion
func (i *GCVersion) GetServerVersion() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetServerVersion", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &GCVersionGetServerVersion{},
	}

	return req, nil
}
