// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IInventoryService

package geyser

import "net/http"

// SchemaInventoryService stores the SchemaInterfaces for interface IInventoryService
var SchemaInventoryService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "SplitItemStack",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "itemid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "quantity",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "CombineItemStacks",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "fromitemid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "destitemid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "quantity",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPriceSheet",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "ecurrency",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
		),
		Name: "IInventoryService",
	},
)

// InventoryService represents interface IInventoryService
type InventoryService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewInventoryService creates a new InventoryService interface
func NewInventoryService(c *Client) (*InventoryService, error) {
	si, err := SchemaInventoryService.Get("IInventoryService", 0)

	if err != nil {
		return nil, err
	}

	s := &InventoryService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// InventoryService creates a new InventoryService interface
func (c *Client) InventoryService() (*InventoryService, error) {
	return NewInventoryService(c)
}

// SplitItemStack creates a Request for interface method SplitItemStack
func (i *InventoryService) SplitItemStack() (*Request, error) {
	sm, err := i.Interface.Methods.Get("SplitItemStack", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &InventoryServiceSplitItemStack{},
	}

	return req, nil
}

// CombineItemStacks creates a Request for interface method CombineItemStacks
func (i *InventoryService) CombineItemStacks() (*Request, error) {
	sm, err := i.Interface.Methods.Get("CombineItemStacks", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &InventoryServiceCombineItemStacks{},
	}

	return req, nil
}

// GetPriceSheet creates a Request for interface method GetPriceSheet
func (i *InventoryService) GetPriceSheet() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetPriceSheet", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &InventoryServiceGetPriceSheet{},
	}

	return req, nil
}
