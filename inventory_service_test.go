// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewInventoryService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestInventoryService_AddPromoItem(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceAddPromoItem
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddPromoItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddPromoItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceAddPromoItem)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_CombineItemStacks(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceCombineItemStacks
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CombineItemStacks()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CombineItemStacks", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceCombineItemStacks)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_ConsumeItem(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceConsumeItem
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.ConsumeItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ConsumeItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceConsumeItem)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_ExchangeItem(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceExchangeItem
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.ExchangeItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ExchangeItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceExchangeItem)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_GetInventory(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceGetInventory
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetInventory()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetInventory", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceGetInventory)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_GetItemDefMeta(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceGetItemDefMeta
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemDefMeta()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemDefMeta", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceGetItemDefMeta)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_GetItemDefs(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceGetItemDefs
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetItemDefs()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemDefs", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceGetItemDefs)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_GetPriceSheet(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceGetPriceSheet
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPriceSheet()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPriceSheet", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceGetPriceSheet)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestInventoryService_SplitItemStack(t *testing.T) {
	var i *geyser.InventoryService
	var err error
	var req *geyser.Request
	var result *geyser.InventoryServiceSplitItemStack
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SplitItemStack()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SplitItemStack", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.InventoryServiceSplitItemStack)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
