// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IPlayerService.

package geyser

import "net/http"

// SchemaPlayerService stores the SchemaInterfaces for interface IPlayerService.
var SchemaPlayerService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "RecordOfflinePlaytime",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "ticket",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "play_sessions",
						Optional:    false,
						Type:        "{message}",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetRecentlyPlayedGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The number of games to return (0/unset: all)",
						Name:        "count",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetOwnedGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "true if we want additional details (name, icon) about each game",
						Name:        "include_appinfo",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Free games are excluded by default.  If this is set, free games the user has played will be returned.",
						Name:        "include_played_free_games",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "if set, restricts result set to the passed in apps",
						Name:        "appids_filter",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSteamLevel",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetBadges",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetCommunityBadgeProgress",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The badge we're asking about",
						Name:        "badgeid",
						Optional:    false,
						Type:        "int32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "IsPlayingSharedGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The game player is currently playing",
						Name:        "appid_playing",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetSteamLevelDistribution",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetNicknameList",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "AddFriend",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "RemoveFriend",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "IgnoreFriend",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IPlayerService",
		Undocumented: false,
	},
)

// PlayerService represents interface IPlayerService.
type PlayerService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewPlayerService creates a new PlayerService interface.
func NewPlayerService(c *Client) (*PlayerService, error) {
	si, err := SchemaPlayerService.Get(SchemaInterfaceKey{Name: "IPlayerService"})

	if err != nil {
		return nil, err
	}

	s := &PlayerService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// PlayerService creates a new PlayerService interface.
func (c *Client) PlayerService() (*PlayerService, error) {
	return NewPlayerService(c)
}

/*
AddFriend creates a Request for interface method AddFriend.

This is an undocumented method.
*/
func (i *PlayerService) AddFriend() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "AddFriend",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceAddFriend{},
	}

	return req, nil
}

/*
GetBadges creates a Request for interface method GetBadges.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
*/
func (i *PlayerService) GetBadges() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetBadges",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetBadges{},
	}

	return req, nil
}

/*
GetCommunityBadgeProgress creates a Request for interface method GetCommunityBadgeProgress.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
  * badgeid [int32] (required): The badge we're asking about
*/
func (i *PlayerService) GetCommunityBadgeProgress() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetCommunityBadgeProgress",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetCommunityBadgeProgress{},
	}

	return req, nil
}

/*
GetNicknameList creates a Request for interface method GetNicknameList.

This is an undocumented method.
*/
func (i *PlayerService) GetNicknameList() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetNicknameList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetNicknameList{},
	}

	return req, nil
}

/*
GetOwnedGames creates a Request for interface method GetOwnedGames.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
  * include_appinfo [bool] (required): true if we want additional details (name, icon) about each game
  * include_played_free_games [bool] (required): Free games are excluded by default.  If this is set, free games the user has played will be returned.
  * appids_filter [uint32] (required): if set, restricts result set to the passed in apps
*/
func (i *PlayerService) GetOwnedGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetOwnedGames",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetOwnedGames{},
	}

	return req, nil
}

/*
GetRecentlyPlayedGames creates a Request for interface method GetRecentlyPlayedGames.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
  * count [uint32] (required): The number of games to return (0/unset: all)
*/
func (i *PlayerService) GetRecentlyPlayedGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetRecentlyPlayedGames",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetRecentlyPlayedGames{},
	}

	return req, nil
}

/*
GetSteamLevel creates a Request for interface method GetSteamLevel.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
*/
func (i *PlayerService) GetSteamLevel() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetSteamLevel",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetSteamLevel{},
	}

	return req, nil
}

/*
GetSteamLevelDistribution creates a Request for interface method GetSteamLevelDistribution.

This is an undocumented method.
*/
func (i *PlayerService) GetSteamLevelDistribution() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetSteamLevelDistribution",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetSteamLevelDistribution{},
	}

	return req, nil
}

/*
IgnoreFriend creates a Request for interface method IgnoreFriend.

This is an undocumented method.
*/
func (i *PlayerService) IgnoreFriend() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "IgnoreFriend",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceIgnoreFriend{},
	}

	return req, nil
}

/*
IsPlayingSharedGame creates a Request for interface method IsPlayingSharedGame.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The player we're asking about
  * appid_playing [uint32] (required): The game player is currently playing
*/
func (i *PlayerService) IsPlayingSharedGame() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "IsPlayingSharedGame",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceIsPlayingSharedGame{},
	}

	return req, nil
}

/*
RecordOfflinePlaytime creates a Request for interface method RecordOfflinePlaytime.

Parameters

  * steamid [uint64] (required)
  * ticket [string] (required)
  * play_sessions [{message}] (required)
*/
func (i *PlayerService) RecordOfflinePlaytime() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "RecordOfflinePlaytime",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceRecordOfflinePlaytime{},
	}

	return req, nil
}

/*
RemoveFriend creates a Request for interface method RemoveFriend.

This is an undocumented method.
*/
func (i *PlayerService) RemoveFriend() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "RemoveFriend",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceRemoveFriend{},
	}

	return req, nil
}
