// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IPlayerService

package geyser

import "net/http"

// SchemaPlayerService stores the SchemaInterfaces for interface IPlayerService
var SchemaPlayerService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "RecordOfflinePlaytime",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "ticket",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "",
						Name:        "play_sessions",
						Optional:    false,
						Type:        "{message}",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetRecentlyPlayedGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The number of games to return (0/unset: all)",
						Name:        "count",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetOwnedGames",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "true if we want additional details (name, icon) about each game",
						Name:        "include_appinfo",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Free games are excluded by default.  If this is set, free games the user has played will be returned.",
						Name:        "include_played_free_games",
						Optional:    false,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "if set, restricts result set to the passed in apps",
						Name:        "appids_filter",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSteamLevel",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetBadges",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetCommunityBadgeProgress",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The badge we're asking about",
						Name:        "badgeid",
						Optional:    false,
						Type:        "int32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "IsPlayingSharedGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The player we're asking about",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "The game player is currently playing",
						Name:        "appid_playing",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IPlayerService",
	},
)

// PlayerService represents interface IPlayerService
type PlayerService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewPlayerService creates a new PlayerService interface
func NewPlayerService(c *Client) (*PlayerService, error) {
	si, err := SchemaPlayerService.Get("IPlayerService", 0)

	if err != nil {
		return nil, err
	}

	s := &PlayerService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// PlayerService creates a new PlayerService interface
func (c *Client) PlayerService() (*PlayerService, error) {
	return NewPlayerService(c)
}

// RecordOfflinePlaytime creates a Request for interface method RecordOfflinePlaytime
func (i *PlayerService) RecordOfflinePlaytime() (*Request, error) {
	sm, err := i.Interface.Methods.Get("RecordOfflinePlaytime", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceRecordOfflinePlaytime{},
	}

	return req, nil
}

// GetRecentlyPlayedGames creates a Request for interface method GetRecentlyPlayedGames
func (i *PlayerService) GetRecentlyPlayedGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetRecentlyPlayedGames", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetRecentlyPlayedGames{},
	}

	return req, nil
}

// GetOwnedGames creates a Request for interface method GetOwnedGames
func (i *PlayerService) GetOwnedGames() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetOwnedGames", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetOwnedGames{},
	}

	return req, nil
}

// GetSteamLevel creates a Request for interface method GetSteamLevel
func (i *PlayerService) GetSteamLevel() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSteamLevel", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetSteamLevel{},
	}

	return req, nil
}

// GetBadges creates a Request for interface method GetBadges
func (i *PlayerService) GetBadges() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetBadges", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetBadges{},
	}

	return req, nil
}

// GetCommunityBadgeProgress creates a Request for interface method GetCommunityBadgeProgress
func (i *PlayerService) GetCommunityBadgeProgress() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetCommunityBadgeProgress", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceGetCommunityBadgeProgress{},
	}

	return req, nil
}

// IsPlayingSharedGame creates a Request for interface method IsPlayingSharedGame
func (i *PlayerService) IsPlayingSharedGame() (*Request, error) {
	sm, err := i.Interface.Methods.Get("IsPlayingSharedGame", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &PlayerServiceIsPlayingSharedGame{},
	}

	return req, nil
}
