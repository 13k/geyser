// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewPlayerService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestPlayerService_AddFriend(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceAddFriend
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceAddFriend)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetBadges(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetBadges
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBadges()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBadges", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetBadges)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetCommunityBadgeProgress(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetCommunityBadgeProgress
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetCommunityBadgeProgress()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetCommunityBadgeProgress", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetCommunityBadgeProgress)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetNicknameList(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetNicknameList
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetNicknameList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetNicknameList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetNicknameList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetOwnedGames(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetOwnedGames
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetOwnedGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetOwnedGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetOwnedGames)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetRecentlyPlayedGames(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetRecentlyPlayedGames
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetRecentlyPlayedGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRecentlyPlayedGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetRecentlyPlayedGames)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetSteamLevel(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetSteamLevel
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSteamLevel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSteamLevel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetSteamLevel)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_GetSteamLevelDistribution(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceGetSteamLevelDistribution
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSteamLevelDistribution()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSteamLevelDistribution", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceGetSteamLevelDistribution)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_IgnoreFriend(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceIgnoreFriend
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.IgnoreFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "IgnoreFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceIgnoreFriend)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_IsPlayingSharedGame(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceIsPlayingSharedGame
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.IsPlayingSharedGame()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "IsPlayingSharedGame", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceIsPlayingSharedGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_RecordOfflinePlaytime(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceRecordOfflinePlaytime
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RecordOfflinePlaytime()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecordOfflinePlaytime", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceRecordOfflinePlaytime)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPlayerService_RemoveFriend(t *testing.T) {
	var i *geyser.PlayerService
	var err error
	var req *geyser.Request
	var result *geyser.PlayerServiceRemoveFriend
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RemoveFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PlayerServiceRemoveFriend)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
