// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewPublishedFileService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestPublishedFileService_CanSubscribe(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceCanSubscribe
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CanSubscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CanSubscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceCanSubscribe)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_GetDetails(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceGetDetails
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceGetDetails)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_GetUserFiles(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceGetUserFiles
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetUserFiles()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetUserFiles", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceGetUserFiles)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_Publish(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServicePublish
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Publish()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Publish", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServicePublish)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_QueryFiles(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceQueryFiles
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.QueryFiles()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryFiles", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceQueryFiles)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_RefreshVotingQueue(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceRefreshVotingQueue
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RefreshVotingQueue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RefreshVotingQueue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceRefreshVotingQueue)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_SetDeveloperMetadata(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceSetDeveloperMetadata
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetDeveloperMetadata()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetDeveloperMetadata", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceSetDeveloperMetadata)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_Subscribe(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceSubscribe
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Subscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Subscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceSubscribe)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_Unsubscribe(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceUnsubscribe
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Unsubscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Unsubscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceUnsubscribe)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_Update(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceUpdate
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Update()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Update", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceUpdate)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestPublishedFileService_UpdateTags(t *testing.T) {
	var i *geyser.PublishedFileService
	var err error
	var req *geyser.Request
	var result *geyser.PublishedFileServiceUpdateTags
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.UpdateTags()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UpdateTags", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.PublishedFileServiceUpdateTags)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
