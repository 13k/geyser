// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIBroadcastService(t *testing.T) {
	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestIBroadcastService_GetBroadcastUploadStats(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetBroadcastUploadStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastUploadStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_GetBroadcastViewerStats(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetBroadcastViewerStats()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastViewerStats", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_GetBuildClipStatus(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetBuildClipStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBuildClipStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_GetClipDetails(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetClipDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetClipDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_GetRTMPInfo(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetRTMPInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRTMPInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_MuteBroadcastChatUser(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.MuteBroadcastChatUser()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "MuteBroadcastChatUser", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_PostChatMessage(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.PostChatMessage()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "PostChatMessage", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_PostGameDataFrameRTMP(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.PostGameDataFrameRTMP()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "PostGameDataFrameRTMP", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_RemoveUserChatText(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.RemoveUserChatText()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveUserChatText", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_SetRTMPInfo(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.SetRTMPInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetRTMPInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_StartBuildClip(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.StartBuildClip()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "StartBuildClip", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIBroadcastService_UpdateChatMessageFlair(t *testing.T) {
	var ci *steam.IBroadcastService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIBroadcastService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.UpdateChatMessageFlair()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UpdateChatMessageFlair", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
