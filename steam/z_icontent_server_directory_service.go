// Code generated by geyser. DO NOT EDIT.
// API interface: IContentServerDirectoryService.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIContentServerDirectoryService stores the Interfaces for interface IContentServerDirectoryService.
var SchemaIContentServerDirectoryService = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetServersForSteamPipe",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "client Cell ID",
						Name:        "cell_id",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "max servers in response list",
						Name:        "max_servers",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "client IP address",
						Name:        "ip_override",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "launcher type",
						Name:        "launcher_type",
						Optional:    true,
						Type:        "int32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetDepotPatchInfo",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "depotid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "source_manifestid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "target_manifestid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IContentServerDirectoryService",
		Undocumented: false,
	},
)

// IContentServerDirectoryService represents interface IContentServerDirectoryService.
type IContentServerDirectoryService struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIContentServerDirectoryService creates a new IContentServerDirectoryService interface.
func NewIContentServerDirectoryService(c *Client) (*IContentServerDirectoryService, error) {
	si, err := SchemaIContentServerDirectoryService.Get(schema.InterfaceKey{Name: "IContentServerDirectoryService"})

	if err != nil {
		return nil, err
	}

	s := &IContentServerDirectoryService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IContentServerDirectoryService creates a new IContentServerDirectoryService interface.
func (c *Client) IContentServerDirectoryService() (*IContentServerDirectoryService, error) {
	return NewIContentServerDirectoryService(c)
}

/*
GetDepotPatchInfo creates a Request for interface method GetDepotPatchInfo.

Parameters

  * appid [uint32] (required)
  * depotid [uint32] (required)
  * source_manifestid [uint64] (required)
  * target_manifestid [uint64] (required)
*/
func (i *IContentServerDirectoryService) GetDepotPatchInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetDepotPatchInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetServersForSteamPipe creates a Request for interface method GetServersForSteamPipe.

Parameters

  * cell_id [uint32] (required): client Cell ID
  * max_servers [uint32]: max servers in response list
  * ip_override [string]: client IP address
  * launcher_type [int32]: launcher type
*/
func (i *IContentServerDirectoryService) GetServersForSteamPipe() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServersForSteamPipe",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
