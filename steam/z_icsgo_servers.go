// Code generated by geyser. DO NOT EDIT.
// API interface: ICSGOServers.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaICSGOServers stores the Interfaces for interface ICSGOServers.
var SchemaICSGOServers = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetGameMapsPlaytime",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "What recent interval is requested, possible values: day, week, month",
						Name:        "interval",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "What game mode is requested, possible values: competitive, casual",
						Name:        "gamemode",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "What maps are requested, possible values: operation",
						Name:        "mapgroup",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetGameServersStatus",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ICSGOServers_730",
		Undocumented: false,
	},
)

// ICSGOServers represents interface ICSGOServers.
//
// Supported AppIDs: 730.
type ICSGOServers struct {
	Client    *Client
	Interface *schema.Interface
}

// NewICSGOServers creates a new ICSGOServers interface.
//
// Supported AppIDs: 730.
func NewICSGOServers(c *Client, appID uint32) (*ICSGOServers, error) {
	si, err := SchemaICSGOServers.Get(schema.InterfaceKey{
		AppID: appID,
		Name:  "ICSGOServers",
	})

	if err != nil {
		return nil, err
	}

	s := &ICSGOServers{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ICSGOServers creates a new ICSGOServers interface.
//
// Supported AppIDs: 730.
func (c *Client) ICSGOServers(appID uint32) (*ICSGOServers, error) {
	return NewICSGOServers(c, appID)
}

/*
GetGameMapsPlaytime creates a Request for interface method GetGameMapsPlaytime.

Parameters

  * interval [string] (required): What recent interval is requested, possible values: day, week, month
  * gamemode [string] (required): What game mode is requested, possible values: competitive, casual
  * mapgroup [string] (required): What maps are requested, possible values: operation
*/
func (i *ICSGOServers) GetGameMapsPlaytime() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetGameMapsPlaytime",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

// GetGameServersStatus creates a Request for interface method GetGameServersStatus.
func (i *ICSGOServers) GetGameServersStatus() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetGameServersStatus",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
