// Code generated by geyser. DO NOT EDIT.
// API interface: IDOTA2StreamSystem.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIDOTA2StreamSystem stores the Interfaces for interface IDOTA2StreamSystem.
var SchemaIDOTA2StreamSystem = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetBroadcasterInfo",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "64-bit Steam ID of the broadcaster",
						Name:        "broadcaster_steam_id",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "LeagueID to use if we aren't in a lobby",
						Name:        "league_id",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IDOTA2StreamSystem_570",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetBroadcasterInfo",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "64-bit Steam ID of the broadcaster",
						Name:        "broadcaster_steam_id",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "LeagueID to use if we aren't in a lobby",
						Name:        "league_id",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IDOTA2StreamSystem_205790",
		Undocumented: false,
	},
)

// IDOTA2StreamSystem represents interface IDOTA2StreamSystem.
//
// Supported AppIDs: 570, 205790.
type IDOTA2StreamSystem struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIDOTA2StreamSystem creates a new IDOTA2StreamSystem interface.
//
// Supported AppIDs: 570, 205790.
func NewIDOTA2StreamSystem(c *Client, appID uint32) (*IDOTA2StreamSystem, error) {
	si, err := SchemaIDOTA2StreamSystem.Get(schema.InterfaceKey{
		AppID: appID,
		Name:  "IDOTA2StreamSystem",
	})

	if err != nil {
		return nil, err
	}

	s := &IDOTA2StreamSystem{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IDOTA2StreamSystem creates a new IDOTA2StreamSystem interface.
//
// Supported AppIDs: 570, 205790.
func (c *Client) IDOTA2StreamSystem(appID uint32) (*IDOTA2StreamSystem, error) {
	return NewIDOTA2StreamSystem(c, appID)
}

/*
GetBroadcasterInfo creates a Request for interface method GetBroadcasterInfo.

Parameters

  * broadcaster_steam_id [uint64] (required): 64-bit Steam ID of the broadcaster
  * league_id [uint32]: LeagueID to use if we aren't in a lobby
*/
func (i *IDOTA2StreamSystem) GetBroadcasterInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetBroadcasterInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
