// Code generated by geyser. DO NOT EDIT.
// API interface: IGameInventory.

package steam

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/schema"
	"net/http"
)

// SchemaIGameInventory stores the Interfaces for interface IGameInventory.
var SchemaIGameInventory = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetItemDefArchive",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IGameInventory",
		Undocumented: true,
	},
)

// IGameInventory represents interface IGameInventory.
//
// This is an undocumented interface.
type IGameInventory struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIGameInventory creates a new IGameInventory interface.
func NewIGameInventory(c *Client) (*IGameInventory, error) {
	si, err := SchemaIGameInventory.Get(schema.InterfaceKey{Name: "IGameInventory"})

	if err != nil {
		return nil, err
	}

	s := &IGameInventory{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IGameInventory creates a new IGameInventory interface.
func (c *Client) IGameInventory() (*IGameInventory, error) {
	return NewIGameInventory(c)
}

/*
GetItemDefArchive creates a Request for interface method GetItemDefArchive.

This is an undocumented method.
*/
func (i *IGameInventory) GetItemDefArchive() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetItemDefArchive",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
