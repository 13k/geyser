// Code generated by geyser. DO NOT EDIT.
// API interface: IGameServersService.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIGameServersService stores the Interfaces for interface IGameServersService.
var SchemaIGameServersService = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetAccountList",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "CreateAccount",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The app to use the account for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "The memo to set on the new account",
						Name:        "memo",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "SetMemo",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The SteamID of the game server to set the memo on",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "The memo to set on the new account",
						Name:        "memo",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "ResetLoginToken",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The SteamID of the game server to reset the login token of",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "DeleteAccount",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The SteamID of the game server account to delete",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetAccountPublicInfo",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The SteamID of the game server to get info on",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "QueryLoginToken",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Login token to query",
						Name:        "login_token",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerSteamIDsByIP",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "server_ips",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetServerIPsBySteamID",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "server_steamids",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerList",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IGameServersService",
		Undocumented: false,
	},
)

// IGameServersService represents interface IGameServersService.
type IGameServersService struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIGameServersService creates a new IGameServersService interface.
func NewIGameServersService(c *Client) (*IGameServersService, error) {
	si, err := SchemaIGameServersService.Get(schema.InterfaceKey{Name: "IGameServersService"})

	if err != nil {
		return nil, err
	}

	s := &IGameServersService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IGameServersService creates a new IGameServersService interface.
func (c *Client) IGameServersService() (*IGameServersService, error) {
	return NewIGameServersService(c)
}

/*
CreateAccount creates a Request for interface method CreateAccount.

Parameters

  * key [string] (required): Access key
  * appid [uint32] (required): The app to use the account for
  * memo [string] (required): The memo to set on the new account
*/
func (i *IGameServersService) CreateAccount() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "CreateAccount",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
DeleteAccount creates a Request for interface method DeleteAccount.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server account to delete
*/
func (i *IGameServersService) DeleteAccount() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "DeleteAccount",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetAccountList creates a Request for interface method GetAccountList.

Parameters

  * key [string] (required): Access key
*/
func (i *IGameServersService) GetAccountList() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetAccountList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetAccountPublicInfo creates a Request for interface method GetAccountPublicInfo.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to get info on
*/
func (i *IGameServersService) GetAccountPublicInfo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetAccountPublicInfo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetServerIPsBySteamID creates a Request for interface method GetServerIPsBySteamID.

Parameters

  * key [string] (required): Access key
  * server_steamids [uint64] (required)
*/
func (i *IGameServersService) GetServerIPsBySteamID() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServerIPsBySteamID",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetServerList creates a Request for interface method GetServerList.

This is an undocumented method.
*/
func (i *IGameServersService) GetServerList() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServerList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetServerSteamIDsByIP creates a Request for interface method GetServerSteamIDsByIP.

Parameters

  * key [string] (required): Access key
  * server_ips [string] (required)
*/
func (i *IGameServersService) GetServerSteamIDsByIP() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServerSteamIDsByIP",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
QueryLoginToken creates a Request for interface method QueryLoginToken.

Parameters

  * key [string] (required): Access key
  * login_token [string] (required): Login token to query
*/
func (i *IGameServersService) QueryLoginToken() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "QueryLoginToken",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
ResetLoginToken creates a Request for interface method ResetLoginToken.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to reset the login token of
*/
func (i *IGameServersService) ResetLoginToken() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "ResetLoginToken",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
SetMemo creates a Request for interface method SetMemo.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): The SteamID of the game server to set the memo on
  * memo [string] (required): The memo to set on the new account
*/
func (i *IGameServersService) SetMemo() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SetMemo",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
