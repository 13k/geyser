// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIGameServersService(t *testing.T) {
	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestIGameServersService_CreateAccount(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.CreateAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CreateAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_DeleteAccount(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.DeleteAccount()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "DeleteAccount", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_GetAccountList(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetAccountList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAccountList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_GetAccountPublicInfo(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetAccountPublicInfo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAccountPublicInfo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_GetServerIPsBySteamID(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetServerIPsBySteamID()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerIPsBySteamID", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_GetServerList(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetServerList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_GetServerSteamIDsByIP(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetServerSteamIDsByIP()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServerSteamIDsByIP", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_QueryLoginToken(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.QueryLoginToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryLoginToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_ResetLoginToken(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.ResetLoginToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ResetLoginToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIGameServersService_SetMemo(t *testing.T) {
	var ci *steam.IGameServersService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIGameServersService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.SetMemo()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetMemo", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
