// Code generated by geyser. DO NOT EDIT.
// API interface: IGCVersion.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIGCVersion stores the Interfaces for interface IGCVersion.
var SchemaIGCVersion = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_440",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_570",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_730",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_205790",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_583950",
		Undocumented: false,
	},
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetClientVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetServerVersion",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "IGCVersion_1046930",
		Undocumented: false,
	},
)

// IGCVersion represents interface IGCVersion.
//
// Supported AppIDs: 440, 570, 730, 205790, 583950, 1046930.
type IGCVersion struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIGCVersion creates a new IGCVersion interface.
//
// Supported AppIDs: 440, 570, 730, 205790, 583950, 1046930.
func NewIGCVersion(c *Client, appID uint32) (*IGCVersion, error) {
	si, err := SchemaIGCVersion.Get(schema.InterfaceKey{
		AppID: appID,
		Name:  "IGCVersion",
	})

	if err != nil {
		return nil, err
	}

	s := &IGCVersion{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IGCVersion creates a new IGCVersion interface.
//
// Supported AppIDs: 440, 570, 730, 205790, 583950, 1046930.
func (c *Client) IGCVersion(appID uint32) (*IGCVersion, error) {
	return NewIGCVersion(c, appID)
}

// GetClientVersion creates a Request for interface method GetClientVersion.
func (i *IGCVersion) GetClientVersion() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetClientVersion",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

// GetServerVersion creates a Request for interface method GetServerVersion.
func (i *IGCVersion) GetServerVersion() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServerVersion",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
