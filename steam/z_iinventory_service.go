// Code generated by geyser. DO NOT EDIT.
// API interface: IInventoryService.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIInventoryService stores the Interfaces for interface IInventoryService.
var SchemaIInventoryService = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "SplitItemStack",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "itemid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "quantity",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "CombineItemStacks",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "fromitemid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "destitemid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "quantity",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetPriceSheet",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "ecurrency",
						Optional:    false,
						Type:        "int32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetInventory",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "ExchangeItem",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "AddPromoItem",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetItemDefs",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetItemDefMeta",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "ConsumeItem",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IInventoryService",
		Undocumented: false,
	},
)

// IInventoryService represents interface IInventoryService.
type IInventoryService struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIInventoryService creates a new IInventoryService interface.
func NewIInventoryService(c *Client) (*IInventoryService, error) {
	si, err := SchemaIInventoryService.Get(schema.InterfaceKey{Name: "IInventoryService"})

	if err != nil {
		return nil, err
	}

	s := &IInventoryService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IInventoryService creates a new IInventoryService interface.
func (c *Client) IInventoryService() (*IInventoryService, error) {
	return NewIInventoryService(c)
}

/*
AddPromoItem creates a Request for interface method AddPromoItem.

This is an undocumented method.
*/
func (i *IInventoryService) AddPromoItem() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "AddPromoItem",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
CombineItemStacks creates a Request for interface method CombineItemStacks.

Parameters

  * key [string] (required): Access key
  * appid [uint32] (required)
  * fromitemid [uint64] (required)
  * destitemid [uint64] (required)
  * quantity [uint32] (required)
*/
func (i *IInventoryService) CombineItemStacks() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "CombineItemStacks",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
ConsumeItem creates a Request for interface method ConsumeItem.

This is an undocumented method.
*/
func (i *IInventoryService) ConsumeItem() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "ConsumeItem",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
ExchangeItem creates a Request for interface method ExchangeItem.

This is an undocumented method.
*/
func (i *IInventoryService) ExchangeItem() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "ExchangeItem",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetInventory creates a Request for interface method GetInventory.

This is an undocumented method.
*/
func (i *IInventoryService) GetInventory() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetInventory",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetItemDefMeta creates a Request for interface method GetItemDefMeta.

This is an undocumented method.
*/
func (i *IInventoryService) GetItemDefMeta() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetItemDefMeta",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetItemDefs creates a Request for interface method GetItemDefs.

This is an undocumented method.
*/
func (i *IInventoryService) GetItemDefs() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetItemDefs",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetPriceSheet creates a Request for interface method GetPriceSheet.

Parameters

  * key [string] (required): Access key
  * ecurrency [int32] (required)
*/
func (i *IInventoryService) GetPriceSheet() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetPriceSheet",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
SplitItemStack creates a Request for interface method SplitItemStack.

Parameters

  * key [string] (required): Access key
  * appid [uint32] (required)
  * itemid [uint64] (required)
  * quantity [uint32] (required)
*/
func (i *IInventoryService) SplitItemStack() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SplitItemStack",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
