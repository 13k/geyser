// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIInventoryService(t *testing.T) {
	client := &steam.Client{}
	iface, err := steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	assert.Same(t, client, iface.Client)
	assert.NotNil(t, iface.Interface)
}

func TestIInventoryService_AddPromoItem(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.AddPromoItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddPromoItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_CombineItemStacks(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.CombineItemStacks()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CombineItemStacks", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_ConsumeItem(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.ConsumeItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ConsumeItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_ExchangeItem(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.ExchangeItem()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ExchangeItem", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_GetInventory(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetInventory()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetInventory", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_GetItemDefMeta(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetItemDefMeta()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemDefMeta", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_GetItemDefs(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetItemDefs()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetItemDefs", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_GetPriceSheet(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetPriceSheet()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPriceSheet", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIInventoryService_SplitItemStack(t *testing.T) {
	var iface *steam.IInventoryService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIInventoryService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.SplitItemStack()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SplitItemStack", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
