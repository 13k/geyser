// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIPlayerService(t *testing.T) {
	client := &steam.Client{}
	iface, err := steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	assert.Same(t, client, iface.Client)
	assert.NotNil(t, iface.Interface)
}

func TestIPlayerService_AddFriend(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.AddFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetBadges(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetBadges()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBadges", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetCommunityBadgeProgress(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetCommunityBadgeProgress()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetCommunityBadgeProgress", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetNicknameList(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetNicknameList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetNicknameList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetOwnedGames(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetOwnedGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetOwnedGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetRecentlyPlayedGames(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetRecentlyPlayedGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetRecentlyPlayedGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetSteamLevel(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetSteamLevel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSteamLevel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_GetSteamLevelDistribution(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.GetSteamLevelDistribution()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSteamLevelDistribution", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_IgnoreFriend(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.IgnoreFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "IgnoreFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_IsPlayingSharedGame(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.IsPlayingSharedGame()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "IsPlayingSharedGame", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_RecordOfflinePlaytime(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RecordOfflinePlaytime()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecordOfflinePlaytime", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPlayerService_RemoveFriend(t *testing.T) {
	var iface *steam.IPlayerService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewIPlayerService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RemoveFriend()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveFriend", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
