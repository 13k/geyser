// Code generated by geyser. DO NOT EDIT.
// API interface: IPublishedFileService.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaIPublishedFileService stores the Interfaces for interface IPublishedFileService.
var SchemaIPublishedFileService = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "QueryFiles",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "enumeration EPublishedFileQueryType in clientenums.h",
						Name:        "query_type",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Current page",
						Name:        "page",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Cursor to paginate through the results (set to '*' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored.",
						Name:        "cursor",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "(Optional) The number of results, per page to return.",
						Name:        "numperpage",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "App that created the files",
						Name:        "creator_appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "App that consumes the files",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Tags to match on. See match_all_tags parameter below",
						Name:        "requiredtags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
						Name:        "excludedtags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "If true, then items must have all the tags specified, otherwise they must have at least one of the tags.",
						Name:        "match_all_tags",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Required flags that must be set on any returned items",
						Name:        "required_flags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Flags that must not be set on any returned items",
						Name:        "omitted_flags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Text to match in the item's title or description",
						Name:        "search_text",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "EPublishedFileInfoMatchingFileType",
						Name:        "filetype",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Find all items that reference the given item.",
						Name:        "child_publishedfileid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7].",
						Name:        "days",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given",
						Name:        "include_recent_votes_only",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Allow stale data to be returned for the specified number of seconds.",
						Name:        "cache_max_age_seconds",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Language to search in and also what gets returned. Defaults to English.",
						Name:        "language",
						Optional:    true,
						Type:        "int32",
					},
					&schema.MethodParam{
						Description: "Required key-value tags to match on.",
						Name:        "required_kv_tags",
						Optional:    false,
						Type:        "{message}",
					},
					&schema.MethodParam{
						Description: "(Optional) At least one of the tags must be present on a published file to satisfy the query.",
						Name:        "taggroups",
						Optional:    false,
						Type:        "{message}",
					},
					&schema.MethodParam{
						Description: "(Optional) If true, only return the total number of files that satisfy this query.",
						Name:        "totalonly",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "(Optional) If true, only return the published file ids of files that satisfy this query.",
						Name:        "ids_only",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return vote data",
						Name:        "return_vote_data",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return tags in the file details",
						Name:        "return_tags",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return key-value tags in the file details",
						Name:        "return_kv_tags",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return preview image and video details in the file details",
						Name:        "return_previews",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return child item ids in the file details",
						Name:        "return_children",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Populate the short_description field instead of file_description",
						Name:        "return_short_description",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return pricing information, if applicable",
						Name:        "return_for_sale_data",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Populate the metadata",
						Name:        "return_metadata",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return playtime stats for the specified number of days before today.",
						Name:        "return_playtime_stats",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "By default, if none of the other 'return_*' fields are set, only some voting details are returned. Set this to true to return the default set of details.",
						Name:        "return_details",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Strips BBCode from descriptions.",
						Name:        "strip_description_bbcode",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return the data for the specified revision.",
						Name:        "desired_revision",
						Optional:    true,
						Type:        "{enum}",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetDetails",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Set of published file Ids to retrieve details for.",
						Name:        "publishedfileids",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "If true, return tag information in the returned details.",
						Name:        "includetags",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return preview information in the returned details.",
						Name:        "includeadditionalpreviews",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return children in the returned details.",
						Name:        "includechildren",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return key value tags in the returned details.",
						Name:        "includekvtags",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return vote data in the returned details.",
						Name:        "includevotes",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return a short description instead of the full description.",
						Name:        "short_description",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, return pricing data, if applicable.",
						Name:        "includeforsaledata",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "If true, populate the metadata field.",
						Name:        "includemetadata",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Specifies the localized text to return. Defaults to English.",
						Name:        "language",
						Optional:    true,
						Type:        "int32",
					},
					&schema.MethodParam{
						Description: "Return playtime stats for the specified number of days before today.",
						Name:        "return_playtime_stats",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Strips BBCode from descriptions.",
						Name:        "strip_description_bbcode",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return the data for the specified revision.",
						Name:        "desired_revision",
						Optional:    true,
						Type:        "{enum}",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetUserFiles",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Steam ID of the user whose files are being requested.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "App Id of the app that the files were published to.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "(Optional) Starting page for results.",
						Name:        "page",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "(Optional) The number of results, per page to return.",
						Name:        "numperpage",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "(Optional) Type of files to be returned.",
						Name:        "type",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "(Optional) Sorting method to use on returned values.",
						Name:        "sortmethod",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "(optional) Filter by privacy settings.",
						Name:        "privacy",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "(Optional) Tags that must be present on a published file to satisfy the query.",
						Name:        "requiredtags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
						Name:        "excludedtags",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Required key-value tags to match on.",
						Name:        "required_kv_tags",
						Optional:    false,
						Type:        "{message}",
					},
					&schema.MethodParam{
						Description: "(Optional) File type to match files to.",
						Name:        "filetype",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "App Id of the app that published the files, only matched if specified.",
						Name:        "creator_appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Match this cloud filename if specified.",
						Name:        "match_cloud_filename",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Allow stale data to be returned for the specified number of seconds.",
						Name:        "cache_max_age_seconds",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Specifies the localized text to return. Defaults to English.",
						Name:        "language",
						Optional:    true,
						Type:        "int32",
					},
					&schema.MethodParam{
						Description: "(Optional) At least one of the tags must be present on a published file to satisfy the query.",
						Name:        "taggroups",
						Optional:    false,
						Type:        "{message}",
					},
					&schema.MethodParam{
						Description: "(Optional) If true, only return the total number of files that satisfy this query.",
						Name:        "totalonly",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "(Optional) If true, only return the published file ids of files that satisfy this query.",
						Name:        "ids_only",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return vote data",
						Name:        "return_vote_data",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return tags in the file details",
						Name:        "return_tags",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return key-value tags in the file details",
						Name:        "return_kv_tags",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return preview image and video details in the file details",
						Name:        "return_previews",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return child item ids in the file details",
						Name:        "return_children",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Populate the short_description field instead of file_description",
						Name:        "return_short_description",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return pricing information, if applicable",
						Name:        "return_for_sale_data",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Populate the metadata field",
						Name:        "return_metadata",
						Optional:    true,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return playtime stats for the specified number of days before today.",
						Name:        "return_playtime_stats",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Strips BBCode from descriptions.",
						Name:        "strip_description_bbcode",
						Optional:    false,
						Type:        "bool",
					},
					&schema.MethodParam{
						Description: "Return the data for the specified revision.",
						Name:        "desired_revision",
						Optional:    true,
						Type:        "{enum}",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "Subscribe",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "Unsubscribe",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "CanSubscribe",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "Publish",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "Update",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RefreshVotingQueue",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "SetDeveloperMetadata",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "UpdateTags",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "IPublishedFileService",
		Undocumented: false,
	},
)

// IPublishedFileService represents interface IPublishedFileService.
type IPublishedFileService struct {
	Client    *Client
	Interface *schema.Interface
}

// NewIPublishedFileService creates a new IPublishedFileService interface.
func NewIPublishedFileService(c *Client) (*IPublishedFileService, error) {
	si, err := SchemaIPublishedFileService.Get(schema.InterfaceKey{Name: "IPublishedFileService"})

	if err != nil {
		return nil, err
	}

	s := &IPublishedFileService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// IPublishedFileService creates a new IPublishedFileService interface.
func (c *Client) IPublishedFileService() (*IPublishedFileService, error) {
	return NewIPublishedFileService(c)
}

/*
CanSubscribe creates a Request for interface method CanSubscribe.

This is an undocumented method.
*/
func (i *IPublishedFileService) CanSubscribe() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "CanSubscribe",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetDetails creates a Request for interface method GetDetails.

Parameters

  * key [string] (required): Access key
  * publishedfileids [uint64] (required): Set of published file Ids to retrieve details for.
  * includetags [bool] (required): If true, return tag information in the returned details.
  * includeadditionalpreviews [bool] (required): If true, return preview information in the returned details.
  * includechildren [bool] (required): If true, return children in the returned details.
  * includekvtags [bool] (required): If true, return key value tags in the returned details.
  * includevotes [bool] (required): If true, return vote data in the returned details.
  * short_description [bool] (required): If true, return a short description instead of the full description.
  * includeforsaledata [bool] (required): If true, return pricing data, if applicable.
  * includemetadata [bool] (required): If true, populate the metadata field.
  * language [int32]: Specifies the localized text to return. Defaults to English.
  * return_playtime_stats [uint32] (required): Return playtime stats for the specified number of days before today.
  * appid [uint32] (required)
  * strip_description_bbcode [bool] (required): Strips BBCode from descriptions.
  * desired_revision [{enum}]: Return the data for the specified revision.
*/
func (i *IPublishedFileService) GetDetails() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetDetails",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetUserFiles creates a Request for interface method GetUserFiles.

Parameters

  * key [string] (required): Access key
  * steamid [uint64] (required): Steam ID of the user whose files are being requested.
  * appid [uint32] (required): App Id of the app that the files were published to.
  * page [uint32]: (Optional) Starting page for results.
  * numperpage [uint32]: (Optional) The number of results, per page to return.
  * type [string]: (Optional) Type of files to be returned.
  * sortmethod [string]: (Optional) Sorting method to use on returned values.
  * privacy [uint32] (required): (optional) Filter by privacy settings.
  * requiredtags [string] (required): (Optional) Tags that must be present on a published file to satisfy the query.
  * excludedtags [string] (required): (Optional) Tags that must NOT be present on a published file to satisfy the query.
  * required_kv_tags [{message}] (required): Required key-value tags to match on.
  * filetype [uint32] (required): (Optional) File type to match files to.
  * creator_appid [uint32] (required): App Id of the app that published the files, only matched if specified.
  * match_cloud_filename [string] (required): Match this cloud filename if specified.
  * cache_max_age_seconds [uint32]: Allow stale data to be returned for the specified number of seconds.
  * language [int32]: Specifies the localized text to return. Defaults to English.
  * taggroups [{message}] (required): (Optional) At least one of the tags must be present on a published file to satisfy the query.
  * totalonly [bool] (required): (Optional) If true, only return the total number of files that satisfy this query.
  * ids_only [bool] (required): (Optional) If true, only return the published file ids of files that satisfy this query.
  * return_vote_data [bool]: Return vote data
  * return_tags [bool] (required): Return tags in the file details
  * return_kv_tags [bool]: Return key-value tags in the file details
  * return_previews [bool] (required): Return preview image and video details in the file details
  * return_children [bool] (required): Return child item ids in the file details
  * return_short_description [bool]: Populate the short_description field instead of file_description
  * return_for_sale_data [bool] (required): Return pricing information, if applicable
  * return_metadata [bool]: Populate the metadata field
  * return_playtime_stats [uint32] (required): Return playtime stats for the specified number of days before today.
  * strip_description_bbcode [bool] (required): Strips BBCode from descriptions.
  * desired_revision [{enum}]: Return the data for the specified revision.
*/
func (i *IPublishedFileService) GetUserFiles() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetUserFiles",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
Publish creates a Request for interface method Publish.

This is an undocumented method.
*/
func (i *IPublishedFileService) Publish() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "Publish",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
QueryFiles creates a Request for interface method QueryFiles.

Parameters

  * key [string] (required): Access key
  * query_type [uint32] (required): enumeration EPublishedFileQueryType in clientenums.h
  * page [uint32] (required): Current page
  * cursor [string] (required): Cursor to paginate through the results (set to '*' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored.
  * numperpage [uint32]: (Optional) The number of results, per page to return.
  * creator_appid [uint32] (required): App that created the files
  * appid [uint32] (required): App that consumes the files
  * requiredtags [string] (required): Tags to match on. See match_all_tags parameter below
  * excludedtags [string] (required): (Optional) Tags that must NOT be present on a published file to satisfy the query.
  * match_all_tags [bool]: If true, then items must have all the tags specified, otherwise they must have at least one of the tags.
  * required_flags [string] (required): Required flags that must be set on any returned items
  * omitted_flags [string] (required): Flags that must not be set on any returned items
  * search_text [string] (required): Text to match in the item's title or description
  * filetype [uint32] (required): EPublishedFileInfoMatchingFileType
  * child_publishedfileid [uint64] (required): Find all items that reference the given item.
  * days [uint32] (required): If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7].
  * include_recent_votes_only [bool] (required): If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given
  * cache_max_age_seconds [uint32]: Allow stale data to be returned for the specified number of seconds.
  * language [int32]: Language to search in and also what gets returned. Defaults to English.
  * required_kv_tags [{message}] (required): Required key-value tags to match on.
  * taggroups [{message}] (required): (Optional) At least one of the tags must be present on a published file to satisfy the query.
  * totalonly [bool] (required): (Optional) If true, only return the total number of files that satisfy this query.
  * ids_only [bool] (required): (Optional) If true, only return the published file ids of files that satisfy this query.
  * return_vote_data [bool] (required): Return vote data
  * return_tags [bool] (required): Return tags in the file details
  * return_kv_tags [bool] (required): Return key-value tags in the file details
  * return_previews [bool] (required): Return preview image and video details in the file details
  * return_children [bool] (required): Return child item ids in the file details
  * return_short_description [bool] (required): Populate the short_description field instead of file_description
  * return_for_sale_data [bool] (required): Return pricing information, if applicable
  * return_metadata [bool]: Populate the metadata
  * return_playtime_stats [uint32] (required): Return playtime stats for the specified number of days before today.
  * return_details [bool] (required): By default, if none of the other 'return_*' fields are set, only some voting details are returned. Set this to true to return the default set of details.
  * strip_description_bbcode [bool] (required): Strips BBCode from descriptions.
  * desired_revision [{enum}]: Return the data for the specified revision.
*/
func (i *IPublishedFileService) QueryFiles() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "QueryFiles",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RefreshVotingQueue creates a Request for interface method RefreshVotingQueue.

This is an undocumented method.
*/
func (i *IPublishedFileService) RefreshVotingQueue() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RefreshVotingQueue",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
SetDeveloperMetadata creates a Request for interface method SetDeveloperMetadata.

This is an undocumented method.
*/
func (i *IPublishedFileService) SetDeveloperMetadata() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SetDeveloperMetadata",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
Subscribe creates a Request for interface method Subscribe.

This is an undocumented method.
*/
func (i *IPublishedFileService) Subscribe() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "Subscribe",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
Unsubscribe creates a Request for interface method Unsubscribe.

This is an undocumented method.
*/
func (i *IPublishedFileService) Unsubscribe() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "Unsubscribe",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
Update creates a Request for interface method Update.

This is an undocumented method.
*/
func (i *IPublishedFileService) Update() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "Update",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
UpdateTags creates a Request for interface method UpdateTags.

This is an undocumented method.
*/
func (i *IPublishedFileService) UpdateTags() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "UpdateTags",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
