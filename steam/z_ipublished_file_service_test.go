// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewIPublishedFileService(t *testing.T) {
	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestIPublishedFileService_CanSubscribe(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.CanSubscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CanSubscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_GetDetails(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_GetUserFiles(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetUserFiles()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetUserFiles", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_Publish(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.Publish()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Publish", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_QueryFiles(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.QueryFiles()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryFiles", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_RefreshVotingQueue(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.RefreshVotingQueue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RefreshVotingQueue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_SetDeveloperMetadata(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.SetDeveloperMetadata()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetDeveloperMetadata", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_Subscribe(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.Subscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Subscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_Unsubscribe(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.Unsubscribe()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Unsubscribe", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_Update(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.Update()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Update", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestIPublishedFileService_UpdateTags(t *testing.T) {
	var ci *steam.IPublishedFileService
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewIPublishedFileService(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.UpdateTags()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UpdateTags", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
