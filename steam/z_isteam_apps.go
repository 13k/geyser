// Code generated by geyser. DO NOT EDIT.
// API interface: ISteamApps.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaISteamApps stores the Interfaces for interface ISteamApps.
var SchemaISteamApps = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetAppList",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "GetAppList",
				Params:       schema.NewMethodParams(),
				Undocumented: false,
				Version:      2,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetSDRConfig",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "AppID of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Partner type",
						Name:        "partner",
						Optional:    true,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetServersAtAddress",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "IP or IP:queryport to list",
						Name:        "addr",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "UpToDateCheck",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "AppID of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "The installed version of the game",
						Name:        "version",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamApps",
		Undocumented: false,
	},
)

// ISteamApps represents interface ISteamApps.
type ISteamApps struct {
	Client    *Client
	Interface *schema.Interface
}

// NewISteamApps creates a new ISteamApps interface.
func NewISteamApps(c *Client) (*ISteamApps, error) {
	si, err := SchemaISteamApps.Get(schema.InterfaceKey{Name: "ISteamApps"})

	if err != nil {
		return nil, err
	}

	s := &ISteamApps{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ISteamApps creates a new ISteamApps interface.
func (c *Client) ISteamApps() (*ISteamApps, error) {
	return NewISteamApps(c)
}

/*
GetAppList creates a Request for interface method GetAppList.

Supported versions: 1, 2.
*/
func (i *ISteamApps) GetAppList(version int) (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetAppList",
		Version: version,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetSDRConfig creates a Request for interface method GetSDRConfig.

Parameters

  * appid [uint32] (required): AppID of game
  * partner [string]: Partner type
*/
func (i *ISteamApps) GetSDRConfig() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetSDRConfig",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
GetServersAtAddress creates a Request for interface method GetServersAtAddress.

Parameters

  * addr [string] (required): IP or IP:queryport to list
*/
func (i *ISteamApps) GetServersAtAddress() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetServersAtAddress",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}

/*
UpToDateCheck creates a Request for interface method UpToDateCheck.

Parameters

  * appid [uint32] (required): AppID of game
  * version [uint32] (required): The installed version of the game
*/
func (i *ISteamApps) UpToDateCheck() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "UpToDateCheck",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &geyser.Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
	}

	return req, nil
}
