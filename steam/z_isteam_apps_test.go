// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewISteamApps(t *testing.T) {
	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err := steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	assert.Same(t, client, ci.Client)
	assert.NotNil(t, ci.Interface)
}

func TestISteamApps_GetAppList(t *testing.T) {
	var ci *steam.ISteamApps
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetAppList(1)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAppList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	ci, err = steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetAppList(2)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetAppList", req.Method.Name)
		assert.Equal(t, 2, req.Method.Version)
	}
}

func TestISteamApps_GetSDRConfig(t *testing.T) {
	var ci *steam.ISteamApps
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetSDRConfig()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSDRConfig", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestISteamApps_GetServersAtAddress(t *testing.T) {
	var ci *steam.ISteamApps
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.GetServersAtAddress()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetServersAtAddress", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestISteamApps_UpToDateCheck(t *testing.T) {
	var ci *steam.ISteamApps
	var err error
	var req *geyser.Request

	client, err := steam.New()

	require.NoError(t, err)
	require.NotNil(t, client)

	ci, err = steam.NewISteamApps(client)

	require.NoError(t, err)
	require.NotNil(t, ci)

	req, err = ci.UpToDateCheck()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, ci.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "UpToDateCheck", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
