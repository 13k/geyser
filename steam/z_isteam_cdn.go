// Code generated by geyser. DO NOT EDIT.
// API interface: ISteamCDN.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaISteamCDN stores the Interfaces for interface ISteamCDN.
var SchemaISteamCDN = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "SetClientFilters",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Steam name of CDN property",
						Name:        "cdnname",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "comma-separated list of allowed IP address blocks in CIDR format - blank for not used",
						Name:        "allowedipblocks",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "comma-separated list of allowed client network AS numbers - blank for not used",
						Name:        "allowedasns",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "comma-separated list of allowed client IP country codes in ISO 3166-1 format - blank for not used",
						Name:        "allowedipcountries",
						Optional:    true,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "SetPerformanceStats",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Steam name of CDN property",
						Name:        "cdnname",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Outgoing network traffic in Mbps",
						Name:        "mbps_sent",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Incoming network traffic in Mbps",
						Name:        "mbps_recv",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Percent CPU load",
						Name:        "cpu_percent",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Percent cache hits",
						Name:        "cache_hit_percent",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamCDN",
		Undocumented: false,
	},
)

// ISteamCDN represents interface ISteamCDN.
type ISteamCDN struct {
	Client    *Client
	Interface *schema.Interface
}

// NewISteamCDN creates a new ISteamCDN interface.
func NewISteamCDN(c *Client) (*ISteamCDN, error) {
	si, err := SchemaISteamCDN.Get(schema.InterfaceKey{Name: "ISteamCDN"})

	if err != nil {
		return nil, err
	}

	s := &ISteamCDN{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ISteamCDN creates a new ISteamCDN interface.
func (c *Client) ISteamCDN() (*ISteamCDN, error) {
	return NewISteamCDN(c)
}

/*
SetClientFilters creates a Request for interface method SetClientFilters.

Parameters

  * key [string] (required): access key
  * cdnname [string] (required): Steam name of CDN property
  * allowedipblocks [string]: comma-separated list of allowed IP address blocks in CIDR format - blank for not used
  * allowedasns [string]: comma-separated list of allowed client network AS numbers - blank for not used
  * allowedipcountries [string]: comma-separated list of allowed client IP country codes in ISO 3166-1 format - blank for not used
*/
func (i *ISteamCDN) SetClientFilters() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SetClientFilters",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
SetPerformanceStats creates a Request for interface method SetPerformanceStats.

Parameters

  * key [string] (required): access key
  * cdnname [string] (required): Steam name of CDN property
  * mbps_sent [uint32]: Outgoing network traffic in Mbps
  * mbps_recv [uint32]: Incoming network traffic in Mbps
  * cpu_percent [uint32]: Percent CPU load
  * cache_hit_percent [uint32]: Percent cache hits
*/
func (i *ISteamCDN) SetPerformanceStats() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SetPerformanceStats",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
