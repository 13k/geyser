// Code generated by geyser. DO NOT EDIT.
// API interface: ISteamNews.

package steam

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/schema"
	"net/http"
)

// SchemaISteamNews stores the Interfaces for interface ISteamNews.
var SchemaISteamNews = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetNewsForApp",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "AppID to retrieve news for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
						Name:        "maxlength",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Retrieve posts earlier than this date (unix epoch timestamp)",
						Name:        "enddate",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "# of posts to retrieve (default 20)",
						Name:        "count",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
						Name:        "tags",
						Optional:    true,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetNewsForApp",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "AppID to retrieve news for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
						Name:        "maxlength",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Retrieve posts earlier than this date (unix epoch timestamp)",
						Name:        "enddate",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "# of posts to retrieve (default 20)",
						Name:        "count",
						Optional:    true,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Comma-separated list of feed names to return news for",
						Name:        "feeds",
						Optional:    true,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
						Name:        "tags",
						Optional:    true,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      2,
			},
		),
		Name:         "ISteamNews",
		Undocumented: false,
	},
)

// ISteamNews represents interface ISteamNews.
type ISteamNews struct {
	Client    *Client
	Interface *schema.Interface
}

// NewISteamNews creates a new ISteamNews interface.
func NewISteamNews(c *Client) (*ISteamNews, error) {
	si, err := SchemaISteamNews.Get(schema.InterfaceKey{Name: "ISteamNews"})

	if err != nil {
		return nil, err
	}

	s := &ISteamNews{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ISteamNews creates a new ISteamNews interface.
func (c *Client) ISteamNews() (*ISteamNews, error) {
	return NewISteamNews(c)
}

/*
GetNewsForApp creates a Request for interface method GetNewsForApp.

Supported versions: 1, 2.

Parameters (v1)

  * appid [uint32] (required): AppID to retrieve news for
  * maxlength [uint32]: Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.
  * enddate [uint32]: Retrieve posts earlier than this date (unix epoch timestamp)
  * count [uint32]: # of posts to retrieve (default 20)
  * tags [string]: Comma-separated list of tags to filter by (e.g. 'patchnodes')

Parameters (v2)

  * appid [uint32] (required): AppID to retrieve news for
  * maxlength [uint32]: Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.
  * enddate [uint32]: Retrieve posts earlier than this date (unix epoch timestamp)
  * count [uint32]: # of posts to retrieve (default 20)
  * feeds [string]: Comma-separated list of feed names to return news for
  * tags [string]: Comma-separated list of tags to filter by (e.g. 'patchnodes')
*/
func (i *ISteamNews) GetNewsForApp(version int) (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetNewsForApp",
		Version: version,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
