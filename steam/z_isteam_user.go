// Code generated by geyser. DO NOT EDIT.
// API interface: ISteamUser.

package steam

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/schema"
	"net/http"
)

// SchemaISteamUser stores the Interfaces for interface ISteamUser.
var SchemaISteamUser = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetFriendList",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "relationship type (ex: friend)",
						Name:        "relationship",
						Optional:    true,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerBans",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Comma-delimited list of SteamIDs",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerSummaries",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Comma-delimited list of SteamIDs",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerSummaries",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "Comma-delimited list of SteamIDs (max: 100)",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      2,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "GetUserGroupList",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "ResolveVanityURL",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The vanity URL to get a SteamID for",
						Name:        "vanityurl",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group",
						Name:        "url_type",
						Optional:    true,
						Type:        "int32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamUser",
		Undocumented: false,
	},
)

// ISteamUser represents interface ISteamUser.
type ISteamUser struct {
	Client    *Client
	Interface *schema.Interface
}

// NewISteamUser creates a new ISteamUser interface.
func NewISteamUser(c *Client) (*ISteamUser, error) {
	si, err := SchemaISteamUser.Get(schema.InterfaceKey{Name: "ISteamUser"})

	if err != nil {
		return nil, err
	}

	s := &ISteamUser{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ISteamUser creates a new ISteamUser interface.
func (c *Client) ISteamUser() (*ISteamUser, error) {
	return NewISteamUser(c)
}

/*
GetFriendList creates a Request for interface method GetFriendList.

Parameters

  * key [string] (required): access key
  * steamid [uint64] (required): SteamID of user
  * relationship [string]: relationship type (ex: friend)
*/
func (i *ISteamUser) GetFriendList() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetFriendList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetPlayerBans creates a Request for interface method GetPlayerBans.

Parameters

  * key [string] (required): access key
  * steamids [string] (required): Comma-delimited list of SteamIDs
*/
func (i *ISteamUser) GetPlayerBans() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetPlayerBans",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetPlayerSummaries creates a Request for interface method GetPlayerSummaries.

Supported versions: 1, 2.

Parameters (v1)

  * key [string] (required): access key
  * steamids [string] (required): Comma-delimited list of SteamIDs

Parameters (v2)

  * key [string] (required): access key
  * steamids [string] (required): Comma-delimited list of SteamIDs (max: 100)
*/
func (i *ISteamUser) GetPlayerSummaries(version int) (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetPlayerSummaries",
		Version: version,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
GetUserGroupList creates a Request for interface method GetUserGroupList.

Parameters

  * key [string] (required): access key
  * steamid [uint64] (required): SteamID of user
*/
func (i *ISteamUser) GetUserGroupList() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "GetUserGroupList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
ResolveVanityURL creates a Request for interface method ResolveVanityURL.

Parameters

  * key [string] (required): access key
  * vanityurl [string] (required): The vanity URL to get a SteamID for
  * url_type [int32]: The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group
*/
func (i *ISteamUser) ResolveVanityURL() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "ResolveVanityURL",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
