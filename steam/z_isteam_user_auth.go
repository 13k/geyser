// Code generated by geyser. DO NOT EDIT.
// API interface: ISteamUserAuth.

package steam

import (
	"github.com/13k/geyser/v2"
	"github.com/13k/geyser/v2/schema"
	"net/http"
)

// SchemaISteamUserAuth stores the Interfaces for interface ISteamUserAuth.
var SchemaISteamUserAuth = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod: http.MethodPost,
				Name:       "AuthenticateUser",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "Should be the users steamid, unencrypted.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&schema.MethodParam{
						Description: "Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key.  Randomness is important here for security.",
						Name:        "sessionkey",
						Optional:    false,
						Type:        "rawbinary",
					},
					&schema.MethodParam{
						Description: "Should be the users hashed loginkey, AES encrypted with the sessionkey.",
						Name:        "encrypted_loginkey",
						Optional:    false,
						Type:        "rawbinary",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod: http.MethodGet,
				Name:       "AuthenticateUserTicket",
				Params: schema.NewMethodParams(
					&schema.MethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&schema.MethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&schema.MethodParam{
						Description: "Ticket from GetAuthSessionTicket.",
						Name:        "ticket",
						Optional:    false,
						Type:        "string",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamUserAuth",
		Undocumented: false,
	},
)

// ISteamUserAuth represents interface ISteamUserAuth.
type ISteamUserAuth struct {
	Client    *Client
	Interface *schema.Interface
}

// NewISteamUserAuth creates a new ISteamUserAuth interface.
func NewISteamUserAuth(c *Client) (*ISteamUserAuth, error) {
	si, err := SchemaISteamUserAuth.Get(schema.InterfaceKey{Name: "ISteamUserAuth"})

	if err != nil {
		return nil, err
	}

	s := &ISteamUserAuth{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ISteamUserAuth creates a new ISteamUserAuth interface.
func (c *Client) ISteamUserAuth() (*ISteamUserAuth, error) {
	return NewISteamUserAuth(c)
}

/*
AuthenticateUser creates a Request for interface method AuthenticateUser.

Parameters

  * steamid [uint64] (required): Should be the users steamid, unencrypted.
  * sessionkey [rawbinary] (required): Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key.  Randomness is important here for security.
  * encrypted_loginkey [rawbinary] (required): Should be the users hashed loginkey, AES encrypted with the sessionkey.
*/
func (i *ISteamUserAuth) AuthenticateUser() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "AuthenticateUser",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
AuthenticateUserTicket creates a Request for interface method AuthenticateUserTicket.

Parameters

  * key [string] (required): access key
  * appid [uint32] (required): appid of game
  * ticket [string] (required): Ticket from GetAuthSessionTicket.
*/
func (i *ISteamUserAuth) AuthenticateUserTicket() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "AuthenticateUserTicket",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
