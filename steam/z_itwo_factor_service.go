// Code generated by geyser. DO NOT EDIT.
// API interface: ITwoFactorService.

package steam

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/schema"
	"net/http"
)

// SchemaITwoFactorService stores the Interfaces for interface ITwoFactorService.
var SchemaITwoFactorService = schema.MustNewInterfaces(
	&schema.Interface{
		Methods: schema.MustNewMethods(
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "AddAuthenticator",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RecoverAuthenticatorCommit",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RecoverAuthenticatorContinue",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RemoveAuthenticator",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RemoveAuthenticatorViaChallengeStart",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "RemoveAuthenticatorViaChallengeContinue",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "FinalizeAddAuthenticator",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "QueryStatus",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "QueryTime",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "QuerySecrets",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "SendEmail",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "ValidateToken",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "CreateEmergencyCodes",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
			&schema.Method{
				HTTPMethod:   http.MethodGet,
				Name:         "DestroyEmergencyCodes",
				Params:       schema.NewMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "ITwoFactorService",
		Undocumented: true,
	},
)

// ITwoFactorService represents interface ITwoFactorService.
//
// This is an undocumented interface.
type ITwoFactorService struct {
	Client    *Client
	Interface *schema.Interface
}

// NewITwoFactorService creates a new ITwoFactorService interface.
func NewITwoFactorService(c *Client) (*ITwoFactorService, error) {
	si, err := SchemaITwoFactorService.Get(schema.InterfaceKey{Name: "ITwoFactorService"})

	if err != nil {
		return nil, err
	}

	s := &ITwoFactorService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// ITwoFactorService creates a new ITwoFactorService interface.
func (c *Client) ITwoFactorService() (*ITwoFactorService, error) {
	return NewITwoFactorService(c)
}

/*
AddAuthenticator creates a Request for interface method AddAuthenticator.

This is an undocumented method.
*/
func (i *ITwoFactorService) AddAuthenticator() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "AddAuthenticator",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
CreateEmergencyCodes creates a Request for interface method CreateEmergencyCodes.

This is an undocumented method.
*/
func (i *ITwoFactorService) CreateEmergencyCodes() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "CreateEmergencyCodes",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
DestroyEmergencyCodes creates a Request for interface method DestroyEmergencyCodes.

This is an undocumented method.
*/
func (i *ITwoFactorService) DestroyEmergencyCodes() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "DestroyEmergencyCodes",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
FinalizeAddAuthenticator creates a Request for interface method FinalizeAddAuthenticator.

This is an undocumented method.
*/
func (i *ITwoFactorService) FinalizeAddAuthenticator() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "FinalizeAddAuthenticator",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
QuerySecrets creates a Request for interface method QuerySecrets.

This is an undocumented method.
*/
func (i *ITwoFactorService) QuerySecrets() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "QuerySecrets",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
QueryStatus creates a Request for interface method QueryStatus.

This is an undocumented method.
*/
func (i *ITwoFactorService) QueryStatus() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "QueryStatus",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
QueryTime creates a Request for interface method QueryTime.

This is an undocumented method.
*/
func (i *ITwoFactorService) QueryTime() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "QueryTime",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RecoverAuthenticatorCommit creates a Request for interface method RecoverAuthenticatorCommit.

This is an undocumented method.
*/
func (i *ITwoFactorService) RecoverAuthenticatorCommit() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RecoverAuthenticatorCommit",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RecoverAuthenticatorContinue creates a Request for interface method RecoverAuthenticatorContinue.

This is an undocumented method.
*/
func (i *ITwoFactorService) RecoverAuthenticatorContinue() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RecoverAuthenticatorContinue",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RemoveAuthenticator creates a Request for interface method RemoveAuthenticator.

This is an undocumented method.
*/
func (i *ITwoFactorService) RemoveAuthenticator() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RemoveAuthenticator",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RemoveAuthenticatorViaChallengeContinue creates a Request for interface method RemoveAuthenticatorViaChallengeContinue.

This is an undocumented method.
*/
func (i *ITwoFactorService) RemoveAuthenticatorViaChallengeContinue() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RemoveAuthenticatorViaChallengeContinue",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
RemoveAuthenticatorViaChallengeStart creates a Request for interface method RemoveAuthenticatorViaChallengeStart.

This is an undocumented method.
*/
func (i *ITwoFactorService) RemoveAuthenticatorViaChallengeStart() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "RemoveAuthenticatorViaChallengeStart",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
SendEmail creates a Request for interface method SendEmail.

This is an undocumented method.
*/
func (i *ITwoFactorService) SendEmail() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "SendEmail",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}

/*
ValidateToken creates a Request for interface method ValidateToken.

This is an undocumented method.
*/
func (i *ITwoFactorService) ValidateToken() (*geyser.Request, error) {
	sm, err := i.Interface.Methods.Get(schema.MethodKey{
		Name:    "ValidateToken",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := geyser.NewRequest(i.Interface, sm)

	return req, nil
}
