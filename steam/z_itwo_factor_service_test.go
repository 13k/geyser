// Code generated by geyser. DO NOT EDIT.

package steam_test

import (
	"github.com/13k/geyser"
	"github.com/13k/geyser/steam"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewITwoFactorService(t *testing.T) {
	client := &steam.Client{}
	iface, err := steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	assert.Same(t, client, iface.Client)
	assert.NotNil(t, iface.Interface)
}

func TestITwoFactorService_AddAuthenticator(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.AddAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_CreateEmergencyCodes(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.CreateEmergencyCodes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CreateEmergencyCodes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_DestroyEmergencyCodes(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.DestroyEmergencyCodes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "DestroyEmergencyCodes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_FinalizeAddAuthenticator(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.FinalizeAddAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "FinalizeAddAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_QuerySecrets(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.QuerySecrets()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QuerySecrets", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_QueryStatus(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.QueryStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_QueryTime(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.QueryTime()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryTime", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_RecoverAuthenticatorCommit(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RecoverAuthenticatorCommit()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecoverAuthenticatorCommit", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_RecoverAuthenticatorContinue(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RecoverAuthenticatorContinue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecoverAuthenticatorContinue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_RemoveAuthenticator(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RemoveAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_RemoveAuthenticatorViaChallengeContinue(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RemoveAuthenticatorViaChallengeContinue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticatorViaChallengeContinue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_RemoveAuthenticatorViaChallengeStart(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.RemoveAuthenticatorViaChallengeStart()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticatorViaChallengeStart", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_SendEmail(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.SendEmail()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SendEmail", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}

func TestITwoFactorService_ValidateToken(t *testing.T) {
	var iface *steam.ITwoFactorService
	var err error
	var req *geyser.Request

	client := &steam.Client{}

	iface, err = steam.NewITwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, iface)

	req, err = iface.ValidateToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, iface.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ValidateToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}
}
