// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamBoaCompra.

package geyser

import "net/http"

// SchemaSteamBoaCompra stores the SchemaInterfaces for interface ISteamBoaCompra.
var SchemaSteamBoaCompra = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "BoaCompraCheckTransactionStatus",
				Params:       NewSchemaMethodParams(),
				Undocumented: true,
				Version:      1,
			},
		),
		Name:         "ISteamBoaCompra",
		Undocumented: true,
	},
)

// SteamBoaCompra represents interface ISteamBoaCompra.
//
// This is an undocumented interface.
type SteamBoaCompra struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamBoaCompra creates a new SteamBoaCompra interface.
func NewSteamBoaCompra(c *Client) (*SteamBoaCompra, error) {
	si, err := SchemaSteamBoaCompra.Get(SchemaInterfaceKey{Name: "ISteamBoaCompra"})

	if err != nil {
		return nil, err
	}

	s := &SteamBoaCompra{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamBoaCompra creates a new SteamBoaCompra interface.
func (c *Client) SteamBoaCompra() (*SteamBoaCompra, error) {
	return NewSteamBoaCompra(c)
}

/*
BoaCompraCheckTransactionStatus creates a Request for interface method BoaCompraCheckTransactionStatus.

This is an undocumented method.
*/
func (i *SteamBoaCompra) BoaCompraCheckTransactionStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "BoaCompraCheckTransactionStatus",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamBoaCompraBoaCompraCheckTransactionStatus{},
	}

	return req, nil
}
