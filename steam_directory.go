// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamDirectory.

package geyser

import "net/http"

// SchemaSteamDirectory stores the SchemaInterfaces for interface ISteamDirectory.
var SchemaSteamDirectory = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetCMList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Client's Steam cell ID",
						Name:        "cellid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Max number of servers to return",
						Name:        "maxcount",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetCSList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Client's Steam cell ID",
						Name:        "cellid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Max number of servers to return",
						Name:        "maxcount",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetSteamPipeDomains",
				Params:       NewSchemaMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamDirectory",
		Undocumented: false,
	},
)

// SteamDirectory represents interface ISteamDirectory.
type SteamDirectory struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamDirectory creates a new SteamDirectory interface.
func NewSteamDirectory(c *Client) (*SteamDirectory, error) {
	si, err := SchemaSteamDirectory.Get(SchemaInterfaceKey{Name: "ISteamDirectory"})

	if err != nil {
		return nil, err
	}

	s := &SteamDirectory{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamDirectory creates a new SteamDirectory interface.
func (c *Client) SteamDirectory() (*SteamDirectory, error) {
	return NewSteamDirectory(c)
}

/*
GetCMList creates a Request for interface method GetCMList.

Parameters

  * cellid [uint32] (required): Client's Steam cell ID
  * maxcount [uint32]: Max number of servers to return
*/
func (i *SteamDirectory) GetCMList() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetCMList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamDirectoryGetCMList{},
	}

	return req, nil
}

/*
GetCSList creates a Request for interface method GetCSList.

Parameters

  * cellid [uint32] (required): Client's Steam cell ID
  * maxcount [uint32]: Max number of servers to return
*/
func (i *SteamDirectory) GetCSList() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetCSList",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamDirectoryGetCSList{},
	}

	return req, nil
}

// GetSteamPipeDomains creates a Request for interface method GetSteamPipeDomains.
func (i *SteamDirectory) GetSteamPipeDomains() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetSteamPipeDomains",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamDirectoryGetSteamPipeDomains{},
	}

	return req, nil
}
