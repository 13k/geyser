// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamEconomy.

package geyser

import "net/http"

// SchemaSteamEconomy stores the SchemaInterfaces for interface ISteamEconomy.
var SchemaSteamEconomy = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetAssetClassInfo",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Must be a steam economy app.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The user's local language",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Number of classes requested. Must be at least one.",
						Name:        "class_count",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Class ID of the nth class.",
						Name:        "classid0",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Instance ID of the nth class.",
						Name:        "instanceid0",
						Optional:    true,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetAssetPrices",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Must be a steam economy app.",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "The currency to filter for",
						Name:        "currency",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The user's local language",
						Name:        "language",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "ISteamEconomy",
	},
)

// SteamEconomy represents interface ISteamEconomy.
type SteamEconomy struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamEconomy creates a new SteamEconomy interface.
func NewSteamEconomy(c *Client) (*SteamEconomy, error) {
	si, err := SchemaSteamEconomy.Get("ISteamEconomy", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamEconomy{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamEconomy creates a new SteamEconomy interface.
func (c *Client) SteamEconomy() (*SteamEconomy, error) {
	return NewSteamEconomy(c)
}

// GetAssetClassInfo creates a Request for interface method GetAssetClassInfo.
func (i *SteamEconomy) GetAssetClassInfo() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetAssetClassInfo", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamEconomyGetAssetClassInfo{},
	}

	return req, nil
}

// GetAssetPrices creates a Request for interface method GetAssetPrices.
func (i *SteamEconomy) GetAssetPrices() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetAssetPrices", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamEconomyGetAssetPrices{},
	}

	return req, nil
}
