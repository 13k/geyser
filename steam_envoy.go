// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamEnvoy.

package geyser

import "net/http"

// SchemaSteamEnvoy stores the SchemaInterfaces for interface ISteamEnvoy.
var SchemaSteamEnvoy = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "PaymentOutReversalNotification",
				Params:     NewSchemaMethodParams(),
				Version:    1,
			},
		),
		Name: "ISteamEnvoy",
	},
)

// SteamEnvoy represents interface ISteamEnvoy.
type SteamEnvoy struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamEnvoy creates a new SteamEnvoy interface.
func NewSteamEnvoy(c *Client) (*SteamEnvoy, error) {
	si, err := SchemaSteamEnvoy.Get("ISteamEnvoy", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamEnvoy{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamEnvoy creates a new SteamEnvoy interface.
func (c *Client) SteamEnvoy() (*SteamEnvoy, error) {
	return NewSteamEnvoy(c)
}

// PaymentOutReversalNotification creates a Request for interface method PaymentOutReversalNotification.
func (i *SteamEnvoy) PaymentOutReversalNotification() (*Request, error) {
	sm, err := i.Interface.Methods.Get("PaymentOutReversalNotification", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamEnvoyPaymentOutReversalNotification{},
	}

	return req, nil
}
