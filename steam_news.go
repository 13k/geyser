// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamNews.

package geyser

import "net/http"

// SchemaSteamNews stores the SchemaInterfaces for interface ISteamNews.
var SchemaSteamNews = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetNewsForApp",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "AppID to retrieve news for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
						Name:        "maxlength",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Retrieve posts earlier than this date (unix epoch timestamp)",
						Name:        "enddate",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "# of posts to retrieve (default 20)",
						Name:        "count",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
						Name:        "tags",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetNewsForApp",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "AppID to retrieve news for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
						Name:        "maxlength",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Retrieve posts earlier than this date (unix epoch timestamp)",
						Name:        "enddate",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "# of posts to retrieve (default 20)",
						Name:        "count",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Comma-separated list of feed names to return news for",
						Name:        "feeds",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
						Name:        "tags",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 2,
			},
		),
		Name: "ISteamNews",
	},
)

// SteamNews represents interface ISteamNews.
type SteamNews struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamNews creates a new SteamNews interface.
func NewSteamNews(c *Client) (*SteamNews, error) {
	si, err := SchemaSteamNews.Get("ISteamNews", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamNews{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamNews creates a new SteamNews interface.
func (c *Client) SteamNews() (*SteamNews, error) {
	return NewSteamNews(c)
}

// GetNewsForApp creates a Request for interface method GetNewsForApp.
//
// Supported versions: [1 2].
func (i *SteamNews) GetNewsForApp(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetNewsForApp", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamNewsGetNewsForApp{},
	}

	return req, nil
}
