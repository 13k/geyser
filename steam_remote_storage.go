// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamRemoteStorage.

package geyser

import "net/http"

// SchemaSteamRemoteStorage stores the SchemaInterfaces for interface ISteamRemoteStorage.
var SchemaSteamRemoteStorage = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "GetCollectionDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Number of collections being requested",
						Name:        "collectioncount",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "collection ids to get the details for",
						Name:        "publishedfileids[0]",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "GetPublishedFileDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Number of items being requested",
						Name:        "itemcount",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "published file id to look up",
						Name:        "publishedfileids[0]",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Undocumented: false,
				Version:      1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetUGCFileDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "If specified, only returns details if the file is owned by the SteamID specified",
						Name:        "steamid",
						Optional:    true,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "ID of UGC file to get info for",
						Name:        "ugcid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "appID of product",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ISteamRemoteStorage",
		Undocumented: false,
	},
)

// SteamRemoteStorage represents interface ISteamRemoteStorage.
type SteamRemoteStorage struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamRemoteStorage creates a new SteamRemoteStorage interface.
func NewSteamRemoteStorage(c *Client) (*SteamRemoteStorage, error) {
	si, err := SchemaSteamRemoteStorage.Get(SchemaInterfaceKey{Name: "ISteamRemoteStorage"})

	if err != nil {
		return nil, err
	}

	s := &SteamRemoteStorage{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamRemoteStorage creates a new SteamRemoteStorage interface.
func (c *Client) SteamRemoteStorage() (*SteamRemoteStorage, error) {
	return NewSteamRemoteStorage(c)
}

/*
GetCollectionDetails creates a Request for interface method GetCollectionDetails.

Parameters

  * collectioncount [uint32] (required): Number of collections being requested
  * publishedfileids[0] [uint64] (required): collection ids to get the details for
*/
func (i *SteamRemoteStorage) GetCollectionDetails() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetCollectionDetails",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamRemoteStorageGetCollectionDetails{},
	}

	return req, nil
}

/*
GetPublishedFileDetails creates a Request for interface method GetPublishedFileDetails.

Parameters

  * itemcount [uint32] (required): Number of items being requested
  * publishedfileids[0] [uint64] (required): published file id to look up
*/
func (i *SteamRemoteStorage) GetPublishedFileDetails() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetPublishedFileDetails",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamRemoteStorageGetPublishedFileDetails{},
	}

	return req, nil
}

/*
GetUGCFileDetails creates a Request for interface method GetUGCFileDetails.

Parameters

  * steamid [uint64]: If specified, only returns details if the file is owned by the SteamID specified
  * ugcid [uint64] (required): ID of UGC file to get info for
  * appid [uint32] (required): appID of product
*/
func (i *SteamRemoteStorage) GetUGCFileDetails() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetUGCFileDetails",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamRemoteStorageGetUGCFileDetails{},
	}

	return req, nil
}
