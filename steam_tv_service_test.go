// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewSteamTVService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestSteamTVService_AddChatBan(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceAddChatBan
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddChatBan()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddChatBan", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceAddChatBan)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_AddChatModerator(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceAddChatModerator
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddChatModerator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddChatModerator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceAddChatModerator)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_AddWordBan(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceAddWordBan
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddWordBan()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddWordBan", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceAddWordBan)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_CreateBroadcastChannel(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceCreateBroadcastChannel
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CreateBroadcastChannel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CreateBroadcastChannel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceCreateBroadcastChannel)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_FollowBroadcastChannel(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceFollowBroadcastChannel
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.FollowBroadcastChannel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "FollowBroadcastChannel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceFollowBroadcastChannel)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelBroadcasters(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelBroadcasters
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelBroadcasters()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelBroadcasters", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelBroadcasters)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelClips(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelClips
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelClips()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelClips", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelClips)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelID(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelID
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelID()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelID", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelID)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelImages(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelImages
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelImages()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelImages", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelImages)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelInteraction(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelInteraction
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelInteraction()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelInteraction", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelInteraction)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelLinks(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelLinks
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelLinks()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelLinks", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelLinks)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelProfile(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelProfile
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelProfile()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelProfile", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelProfile)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetBroadcastChannelStatus(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetBroadcastChannelStatus
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetBroadcastChannelStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetBroadcastChannelStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetBroadcastChannelStatus)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetChannels(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetChannels
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetChannels()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetChannels", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetChannels)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetChatBans(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetChatBans
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetChatBans()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetChatBans", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetChatBans)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetChatModerators(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetChatModerators
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetChatModerators()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetChatModerators", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetChatModerators)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetFeatured(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetFeatured
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetFeatured()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetFeatured", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetFeatured)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetFollowedChannels(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetFollowedChannels
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetFollowedChannels()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetFollowedChannels", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetFollowedChannels)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetGames(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetGames
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGames()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGames", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetGames)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetHomePageContents(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetHomePageContents
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetHomePageContents()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetHomePageContents", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetHomePageContents)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetMyBroadcastChannels(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetMyBroadcastChannels
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetMyBroadcastChannels()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetMyBroadcastChannels", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetMyBroadcastChannels)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetSteamTVUserSettings(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetSteamTVUserSettings
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSteamTVUserSettings()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSteamTVUserSettings", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetSteamTVUserSettings)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetSubscribedChannels(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetSubscribedChannels
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSubscribedChannels()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSubscribedChannels", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetSubscribedChannels)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_GetWordBans(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceGetWordBans
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetWordBans()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetWordBans", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceGetWordBans)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_JoinChat(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceJoinChat
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.JoinChat()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "JoinChat", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceJoinChat)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_ReportBroadcastChannel(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceReportBroadcastChannel
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.ReportBroadcastChannel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ReportBroadcastChannel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceReportBroadcastChannel)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_Search(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSearch
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Search()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Search", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSearch)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_SetBroadcastChannelImage(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSetBroadcastChannelImage
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetBroadcastChannelImage()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetBroadcastChannelImage", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSetBroadcastChannelImage)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_SetBroadcastChannelLinkRegions(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSetBroadcastChannelLinkRegions
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetBroadcastChannelLinkRegions()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetBroadcastChannelLinkRegions", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSetBroadcastChannelLinkRegions)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_SetBroadcastChannelProfile(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSetBroadcastChannelProfile
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetBroadcastChannelProfile()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetBroadcastChannelProfile", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSetBroadcastChannelProfile)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_SetSteamTVUserSettings(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSetSteamTVUserSettings
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SetSteamTVUserSettings()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SetSteamTVUserSettings", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSetSteamTVUserSettings)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamTVService_SubscribeBroadcastChannel(t *testing.T) {
	var i *geyser.SteamTVService
	var err error
	var req *geyser.Request
	var result *geyser.SteamTVServiceSubscribeBroadcastChannel
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamTVService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SubscribeBroadcastChannel()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SubscribeBroadcastChannel", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamTVServiceSubscribeBroadcastChannel)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
