// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamUser.

package geyser

import "net/http"

// SchemaSteamUser stores the SchemaInterfaces for interface ISteamUser.
var SchemaSteamUser = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetFriendList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "relationship type (ex: friend)",
						Name:        "relationship",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerBans",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Comma-delimited list of SteamIDs",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerSummaries",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Comma-delimited list of SteamIDs",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerSummaries",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Comma-delimited list of SteamIDs (max: 100)",
						Name:        "steamids",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 2,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetUserGroupList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "ResolveVanityURL",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The vanity URL to get a SteamID for",
						Name:        "vanityurl",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group",
						Name:        "url_type",
						Optional:    true,
						Type:        "int32",
					},
				),
				Version: 1,
			},
		),
		Name: "ISteamUser",
	},
)

// SteamUser represents interface ISteamUser.
type SteamUser struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamUser creates a new SteamUser interface.
func NewSteamUser(c *Client) (*SteamUser, error) {
	si, err := SchemaSteamUser.Get("ISteamUser", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamUser{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamUser creates a new SteamUser interface.
func (c *Client) SteamUser() (*SteamUser, error) {
	return NewSteamUser(c)
}

// GetUserGroupList creates a Request for interface method GetUserGroupList.
func (i *SteamUser) GetUserGroupList() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetUserGroupList", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserGetUserGroupList{},
	}

	return req, nil
}

// ResolveVanityURL creates a Request for interface method ResolveVanityURL.
func (i *SteamUser) ResolveVanityURL() (*Request, error) {
	sm, err := i.Interface.Methods.Get("ResolveVanityURL", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserResolveVanityURL{},
	}

	return req, nil
}

// GetFriendList creates a Request for interface method GetFriendList.
func (i *SteamUser) GetFriendList() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetFriendList", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserGetFriendList{},
	}

	return req, nil
}

// GetPlayerBans creates a Request for interface method GetPlayerBans.
func (i *SteamUser) GetPlayerBans() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetPlayerBans", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserGetPlayerBans{},
	}

	return req, nil
}

// GetPlayerSummaries creates a Request for interface method GetPlayerSummaries.
//
// Supported versions: [1 2].
func (i *SteamUser) GetPlayerSummaries(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetPlayerSummaries", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserGetPlayerSummaries{},
	}

	return req, nil
}
