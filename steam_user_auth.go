// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamUserAuth.

package geyser

import "net/http"

// SchemaSteamUserAuth stores the SchemaInterfaces for interface ISteamUserAuth.
var SchemaSteamUserAuth = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "AuthenticateUser",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Should be the users steamid, unencrypted.",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key.  Randomness is important here for security.",
						Name:        "sessionkey",
						Optional:    false,
						Type:        "rawbinary",
					},
					&SchemaMethodParam{
						Description: "Should be the users hashed loginkey, AES encrypted with the sessionkey.",
						Name:        "encrypted_loginkey",
						Optional:    false,
						Type:        "rawbinary",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "AuthenticateUserTicket",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Ticket from GetAuthSessionTicket.",
						Name:        "ticket",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "ISteamUserAuth",
	},
)

// SteamUserAuth represents interface ISteamUserAuth.
type SteamUserAuth struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamUserAuth creates a new SteamUserAuth interface.
func NewSteamUserAuth(c *Client) (*SteamUserAuth, error) {
	si, err := SchemaSteamUserAuth.Get("ISteamUserAuth", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamUserAuth{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamUserAuth creates a new SteamUserAuth interface.
func (c *Client) SteamUserAuth() (*SteamUserAuth, error) {
	return NewSteamUserAuth(c)
}

// AuthenticateUser creates a Request for interface method AuthenticateUser.
func (i *SteamUserAuth) AuthenticateUser() (*Request, error) {
	sm, err := i.Interface.Methods.Get("AuthenticateUser", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserAuthAuthenticateUser{},
	}

	return req, nil
}

// AuthenticateUserTicket creates a Request for interface method AuthenticateUserTicket.
func (i *SteamUserAuth) AuthenticateUserTicket() (*Request, error) {
	sm, err := i.Interface.Methods.Get("AuthenticateUserTicket", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserAuthAuthenticateUserTicket{},
	}

	return req, nil
}
