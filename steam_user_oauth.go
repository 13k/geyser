// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamUserOAuth.

package geyser

import "net/http"

// SchemaSteamUserOAuth stores the SchemaInterfaces for interface ISteamUserOAuth.
var SchemaSteamUserOAuth = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetTokenDetails",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "OAuth2 token for which to return details",
						Name:        "access_token",
						Optional:    false,
						Type:        "string",
					},
				),
				Version: 1,
			},
		),
		Name: "ISteamUserOAuth",
	},
)

// SteamUserOAuth represents interface ISteamUserOAuth.
type SteamUserOAuth struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamUserOAuth creates a new SteamUserOAuth interface.
func NewSteamUserOAuth(c *Client) (*SteamUserOAuth, error) {
	si, err := SchemaSteamUserOAuth.Get("ISteamUserOAuth", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamUserOAuth{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamUserOAuth creates a new SteamUserOAuth interface.
func (c *Client) SteamUserOAuth() (*SteamUserOAuth, error) {
	return NewSteamUserOAuth(c)
}

// GetTokenDetails creates a Request for interface method GetTokenDetails.
func (i *SteamUserOAuth) GetTokenDetails() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetTokenDetails", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserOAuthGetTokenDetails{},
	}

	return req, nil
}
