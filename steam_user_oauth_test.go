// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewSteamUserOAuth(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestSteamUserOAuth_GetFriendList(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthGetFriendList
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetFriendList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetFriendList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthGetFriendList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserOAuth_GetGroupList(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthGetGroupList
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGroupList()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGroupList", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthGetGroupList)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserOAuth_GetGroupSummaries(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthGetGroupSummaries
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGroupSummaries()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGroupSummaries", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthGetGroupSummaries)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserOAuth_GetTokenDetails(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthGetTokenDetails
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetTokenDetails()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetTokenDetails", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthGetTokenDetails)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserOAuth_GetUserSummaries(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthGetUserSummaries
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetUserSummaries()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetUserSummaries", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthGetUserSummaries)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserOAuth_Search(t *testing.T) {
	var i *geyser.SteamUserOAuth
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserOAuthSearch
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserOAuth(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.Search()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "Search", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserOAuthSearch)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
