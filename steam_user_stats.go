// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamUserStats

package geyser

import "net/http"

// SchemaSteamUserStats stores the SchemaInterfaces for interface ISteamUserStats
var SchemaSteamUserStats = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGlobalAchievementPercentagesForApp",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "GameID to retrieve the achievement percentages for",
						Name:        "gameid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGlobalAchievementPercentagesForApp",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "GameID to retrieve the achievement percentages for",
						Name:        "gameid",
						Optional:    false,
						Type:        "uint64",
					},
				),
				Version: 2,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetGlobalStatsForGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "AppID that we're getting global stats for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Number of stats get data for",
						Name:        "count",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Names of stat to get data for",
						Name:        "name[0]",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Start date for daily totals (unix epoch timestamp)",
						Name:        "startdate",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "End date for daily totals (unix epoch timestamp)",
						Name:        "enddate",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetNumberOfCurrentPlayers",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "AppID that we're getting user count for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetPlayerAchievements",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "AppID to get achievements for",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Language to return strings for",
						Name:        "l",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaForGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "localized langauge to return (english, french, etc.)",
						Name:        "l",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetSchemaForGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "localized language to return (english, french, etc.)",
						Name:        "l",
						Optional:    true,
						Type:        "string",
					},
				),
				Version: 2,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetUserStatsForGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetUserStatsForGame",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "SteamID of user",
						Name:        "steamid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "appid of game",
						Name:        "appid",
						Optional:    false,
						Type:        "uint32",
					},
				),
				Version: 2,
			},
		),
		Name: "ISteamUserStats",
	},
)

// SteamUserStats represents interface ISteamUserStats
type SteamUserStats struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamUserStats creates a new SteamUserStats interface
func NewSteamUserStats(c *Client) (*SteamUserStats, error) {
	si, err := SchemaSteamUserStats.Get("ISteamUserStats", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamUserStats{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamUserStats creates a new SteamUserStats interface
func (c *Client) SteamUserStats() (*SteamUserStats, error) {
	return NewSteamUserStats(c)
}

// GetGlobalStatsForGame creates a Request for interface method GetGlobalStatsForGame
func (i *SteamUserStats) GetGlobalStatsForGame() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetGlobalStatsForGame", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetGlobalStatsForGame{},
	}

	return req, nil
}

// GetNumberOfCurrentPlayers creates a Request for interface method GetNumberOfCurrentPlayers
func (i *SteamUserStats) GetNumberOfCurrentPlayers() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetNumberOfCurrentPlayers", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetNumberOfCurrentPlayers{},
	}

	return req, nil
}

// GetPlayerAchievements creates a Request for interface method GetPlayerAchievements
func (i *SteamUserStats) GetPlayerAchievements() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetPlayerAchievements", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetPlayerAchievements{},
	}

	return req, nil
}

// GetSchemaForGame creates a Request for interface method GetSchemaForGame
// Supported versions: [2 1]
func (i *SteamUserStats) GetSchemaForGame(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetSchemaForGame", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetSchemaForGame{},
	}

	return req, nil
}

// GetUserStatsForGame creates a Request for interface method GetUserStatsForGame
// Supported versions: [1 2]
func (i *SteamUserStats) GetUserStatsForGame(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetUserStatsForGame", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetUserStatsForGame{},
	}

	return req, nil
}

// GetGlobalAchievementPercentagesForApp creates a Request for interface method GetGlobalAchievementPercentagesForApp
// Supported versions: [2 1]
func (i *SteamUserStats) GetGlobalAchievementPercentagesForApp(version int) (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetGlobalAchievementPercentagesForApp", version)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamUserStatsGetGlobalAchievementPercentagesForApp{},
	}

	return req, nil
}
