// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewSteamUserStats(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestSteamUserStats_GetGlobalAchievementPercentagesForApp(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetGlobalAchievementPercentagesForApp
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGlobalAchievementPercentagesForApp(1)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGlobalAchievementPercentagesForApp", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetGlobalAchievementPercentagesForApp)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGlobalAchievementPercentagesForApp(2)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGlobalAchievementPercentagesForApp", req.Method.Name)
		assert.Equal(t, 2, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetGlobalAchievementPercentagesForApp)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserStats_GetGlobalStatsForGame(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetGlobalStatsForGame
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetGlobalStatsForGame()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetGlobalStatsForGame", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetGlobalStatsForGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserStats_GetNumberOfCurrentPlayers(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetNumberOfCurrentPlayers
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetNumberOfCurrentPlayers()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetNumberOfCurrentPlayers", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetNumberOfCurrentPlayers)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserStats_GetPlayerAchievements(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetPlayerAchievements
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetPlayerAchievements()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetPlayerAchievements", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetPlayerAchievements)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserStats_GetSchemaForGame(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetSchemaForGame
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSchemaForGame(1)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSchemaForGame", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetSchemaForGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetSchemaForGame(2)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetSchemaForGame", req.Method.Name)
		assert.Equal(t, 2, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetSchemaForGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestSteamUserStats_GetUserStatsForGame(t *testing.T) {
	var i *geyser.SteamUserStats
	var err error
	var req *geyser.Request
	var result *geyser.SteamUserStatsGetUserStatsForGame
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetUserStatsForGame(1)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetUserStatsForGame", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetUserStatsForGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}

	i, err = geyser.NewSteamUserStats(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.GetUserStatsForGame(2)

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "GetUserStatsForGame", req.Method.Name)
		assert.Equal(t, 2, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.SteamUserStatsGetUserStatsForGame)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
