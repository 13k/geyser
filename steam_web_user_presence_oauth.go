// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ISteamWebUserPresenceOAuth.

package geyser

import "net/http"

// SchemaSteamWebUserPresenceOAuth stores the SchemaInterfaces for interface ISteamWebUserPresenceOAuth.
var SchemaSteamWebUserPresenceOAuth = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodPost,
				Name:       "PollStatus",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Steam ID of the user",
						Name:        "steamid",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "UMQ Session ID",
						Name:        "umqid",
						Optional:    false,
						Type:        "uint64",
					},
					&SchemaMethodParam{
						Description: "Message that was last known to the user",
						Name:        "message",
						Optional:    false,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Caller-specific poll id",
						Name:        "pollid",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Long-poll timeout in seconds",
						Name:        "sectimeout",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "How many seconds is client considering itself idle, e.g. screen is off",
						Name:        "secidletime",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Boolean, 0 (default): return steamid_from in output, 1: return accountid_from",
						Name:        "use_accountids",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "ISteamWebUserPresenceOAuth",
	},
)

// SteamWebUserPresenceOAuth represents interface ISteamWebUserPresenceOAuth.
type SteamWebUserPresenceOAuth struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewSteamWebUserPresenceOAuth creates a new SteamWebUserPresenceOAuth interface.
func NewSteamWebUserPresenceOAuth(c *Client) (*SteamWebUserPresenceOAuth, error) {
	si, err := SchemaSteamWebUserPresenceOAuth.Get("ISteamWebUserPresenceOAuth", 0)

	if err != nil {
		return nil, err
	}

	s := &SteamWebUserPresenceOAuth{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// SteamWebUserPresenceOAuth creates a new SteamWebUserPresenceOAuth interface.
func (c *Client) SteamWebUserPresenceOAuth() (*SteamWebUserPresenceOAuth, error) {
	return NewSteamWebUserPresenceOAuth(c)
}

// PollStatus creates a Request for interface method PollStatus.
func (i *SteamWebUserPresenceOAuth) PollStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get("PollStatus", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &SteamWebUserPresenceOAuthPollStatus{},
	}

	return req, nil
}
