// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: IStoreService.

package geyser

import "net/http"

// SchemaStoreService stores the SchemaInterfaces for interface IStoreService.
var SchemaStoreService = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: NewSchemaMethods(
			&SchemaMethod{
				HTTPMethod: http.MethodGet,
				Name:       "GetAppList",
				Params: NewSchemaMethodParams(
					&SchemaMethodParam{
						Description: "Access key",
						Name:        "key",
						Optional:    false,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Return only items that have been modified since this date.",
						Name:        "if_modified_since",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Return only items that have a description in this language.",
						Name:        "have_description_language",
						Optional:    true,
						Type:        "string",
					},
					&SchemaMethodParam{
						Description: "Include games (defaults to enabled)",
						Name:        "include_games",
						Optional:    true,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Include DLC",
						Name:        "include_dlc",
						Optional:    true,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Include software items",
						Name:        "include_software",
						Optional:    true,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Include videos and series",
						Name:        "include_videos",
						Optional:    true,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "Include hardware",
						Name:        "include_hardware",
						Optional:    true,
						Type:        "bool",
					},
					&SchemaMethodParam{
						Description: "For continuations, this is the last appid returned from the previous call.",
						Name:        "last_appid",
						Optional:    true,
						Type:        "uint32",
					},
					&SchemaMethodParam{
						Description: "Number of results to return at a time.  Default 10k, max 50k.",
						Name:        "max_results",
						Optional:    true,
						Type:        "uint32",
					},
				),
				Version: 1,
			},
		),
		Name: "IStoreService",
	},
)

// StoreService represents interface IStoreService.
type StoreService struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewStoreService creates a new StoreService interface.
func NewStoreService(c *Client) (*StoreService, error) {
	si, err := SchemaStoreService.Get("IStoreService", 0)

	if err != nil {
		return nil, err
	}

	s := &StoreService{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// StoreService creates a new StoreService interface.
func (c *Client) StoreService() (*StoreService, error) {
	return NewStoreService(c)
}

// GetAppList creates a Request for interface method GetAppList.
func (i *StoreService) GetAppList() (*Request, error) {
	sm, err := i.Interface.Methods.Get("GetAppList", 1)

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &StoreServiceGetAppList{},
	}

	return req, nil
}
