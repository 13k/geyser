// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.
// API interface: ITFSystem.

package geyser

import "net/http"

// SchemaTFSystem stores the SchemaInterfaces for interface ITFSystem.
var SchemaTFSystem = MustNewSchemaInterfaces(
	&SchemaInterface{
		Methods: MustNewSchemaMethods(
			&SchemaMethod{
				HTTPMethod:   http.MethodGet,
				Name:         "GetWorldStatus",
				Params:       NewSchemaMethodParams(),
				Undocumented: false,
				Version:      1,
			},
		),
		Name:         "ITFSystem_440",
		Undocumented: false,
	},
)

// TFSystem represents interface ITFSystem.
//
// Supported AppIDs: 440.
type TFSystem struct {
	Client    *Client
	Interface *SchemaInterface
}

// NewTFSystem creates a new TFSystem interface.
//
// Supported AppIDs: 440.
func NewTFSystem(c *Client, appID uint32) (*TFSystem, error) {
	si, err := SchemaTFSystem.Get(SchemaInterfaceKey{
		AppID: appID,
		Name:  "ITFSystem",
	})

	if err != nil {
		return nil, err
	}

	s := &TFSystem{
		Client:    c,
		Interface: si,
	}

	return s, nil
}

// TFSystem creates a new TFSystem interface.
//
// Supported AppIDs: 440.
func (c *Client) TFSystem(appID uint32) (*TFSystem, error) {
	return NewTFSystem(c, appID)
}

// GetWorldStatus creates a Request for interface method GetWorldStatus.
func (i *TFSystem) GetWorldStatus() (*Request, error) {
	sm, err := i.Interface.Methods.Get(SchemaMethodKey{
		Name:    "GetWorldStatus",
		Version: 1,
	})

	if err != nil {
		return nil, err
	}

	req := &Request{
		Client:    i.Client,
		Interface: i.Interface,
		Method:    sm,
		Result:    &TFSystemGetWorldStatus{},
	}

	return req, nil
}
