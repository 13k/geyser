// Code generated by github.com/13k/geyser/apigen. DO NOT EDIT.

package geyser_test

import (
	"github.com/13k/geyser"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestNewTwoFactorService(t *testing.T) {
	client := &geyser.Client{}
	i, err := geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	assert.Same(t, client, i.Client)
	assert.NotNil(t, i.Interface)
}

func TestTwoFactorService_AddAuthenticator(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceAddAuthenticator
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.AddAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "AddAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceAddAuthenticator)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_CreateEmergencyCodes(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceCreateEmergencyCodes
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.CreateEmergencyCodes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "CreateEmergencyCodes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceCreateEmergencyCodes)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_DestroyEmergencyCodes(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceDestroyEmergencyCodes
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.DestroyEmergencyCodes()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "DestroyEmergencyCodes", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceDestroyEmergencyCodes)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_FinalizeAddAuthenticator(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceFinalizeAddAuthenticator
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.FinalizeAddAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "FinalizeAddAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceFinalizeAddAuthenticator)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_QuerySecrets(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceQuerySecrets
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.QuerySecrets()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QuerySecrets", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceQuerySecrets)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_QueryStatus(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceQueryStatus
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.QueryStatus()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryStatus", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceQueryStatus)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_QueryTime(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceQueryTime
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.QueryTime()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "QueryTime", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceQueryTime)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_RecoverAuthenticatorCommit(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceRecoverAuthenticatorCommit
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RecoverAuthenticatorCommit()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecoverAuthenticatorCommit", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceRecoverAuthenticatorCommit)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_RecoverAuthenticatorContinue(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceRecoverAuthenticatorContinue
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RecoverAuthenticatorContinue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RecoverAuthenticatorContinue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceRecoverAuthenticatorContinue)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_RemoveAuthenticator(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceRemoveAuthenticator
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RemoveAuthenticator()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticator", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceRemoveAuthenticator)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_RemoveAuthenticatorViaChallengeContinue(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceRemoveAuthenticatorViaChallengeContinue
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RemoveAuthenticatorViaChallengeContinue()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticatorViaChallengeContinue", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceRemoveAuthenticatorViaChallengeContinue)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_RemoveAuthenticatorViaChallengeStart(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceRemoveAuthenticatorViaChallengeStart
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.RemoveAuthenticatorViaChallengeStart()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "RemoveAuthenticatorViaChallengeStart", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceRemoveAuthenticatorViaChallengeStart)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_SendEmail(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceSendEmail
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.SendEmail()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "SendEmail", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceSendEmail)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}

func TestTwoFactorService_ValidateToken(t *testing.T) {
	var i *geyser.TwoFactorService
	var err error
	var req *geyser.Request
	var result *geyser.TwoFactorServiceValidateToken
	var ok bool

	client := &geyser.Client{}

	i, err = geyser.NewTwoFactorService(client)

	require.NoError(t, err)
	require.NotNil(t, i)

	req, err = i.ValidateToken()

	require.NoError(t, err)
	require.NotNil(t, req)

	assert.Same(t, client, req.Client)
	assert.Same(t, i.Interface, req.Interface)

	if assert.NotNil(t, req.Method) {
		assert.Equal(t, "ValidateToken", req.Method.Name)
		assert.Equal(t, 1, req.Method.Version)
	}

	result, ok = req.Result.(*geyser.TwoFactorServiceValidateToken)

	if assert.Truef(t, ok, "invalid result type %T", result) {
		assert.NotNil(t, result)
	}
}
